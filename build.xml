<?xml version="1.0" encoding="UTF-8"?>
<project name="dlanguage" default="all">


  <property file="build.properties"/>
  <property name="build.compiler" value="modern"/>
  <!--<property name="jflex.jar" value="JFlex.jar"/>-->
  <!--<property name="jflex.skeleton" value="idea-flex.skeleton"/>-->
  <!--&lt;!&ndash; TODO: Consider using ant-contrib to generalize this pattern into a loop (task generate.sources) &ndash;&gt;-->
  <!--<property name="jflex.haskellHighlight.target.base" value="src/com/dlanguage/highlighting/_HaskellSyntaxHighlightingLexer"/>-->
  <!--<property name="jflex.haskellHighlight.input.file" value="${jflex.haskellHighlight.target.base}.flex"/>-->
  <!--<property name="jflex.haskellHighlight.output.file" value="${jflex.haskellHighlight.target.base}.java"/>-->
  <!--<property name="jflex.haskellParsing.target.base" value="src/com/dlanguage/parsing/_HaskellParsingLexer"/>-->
  <!--<property name="jflex.haskellParsing.input.file" value="${jflex.haskellParsing.target.base}.flex"/>-->
  <!--<property name="jflex.haskellParsing.output.file" value="${jflex.haskellParsing.target.base}.java"/>-->
  <!--<property name="jflex.cabalHighlight.target.base" value="src/com/dlanguage/cabal/highlighting/_CabalSyntaxHighlightingLexer"/>-->
  <!--<property name="jflex.cabalHighlight.input.file" value="${jflex.cabalHighlight.target.base}.flex"/>-->
  <!--<property name="jflex.cabalHighlight.output.file" value="${jflex.cabalHighlight.target.base}.java"/>-->
  <!--<property name="jflex.hamletHighlight.target.base" value="src/com/dlanguage/yesod/shakespeare/hamlet/highlighting/_HamletSyntaxHighlightingLexer"/>-->
  <!--<property name="jflex.hamletHighlight.input.file" value="${jflex.hamletHighlight.target.base}.flex"/>-->
  <!--<property name="jflex.hamletHighlight.output.file" value="${jflex.hamletHighlight.target.base}.java"/>-->

  <dirname property="module.dlanguage.basedir" file="${ant.file}"/>
  <property name="plugin.zip.path.output" value="${module.dlanguage.basedir}/out/intellij-dlanguage.zip"/>
  <property name="plugin.zip.path" value="${module.dlanguage.basedir}/out/zip"/>
  <property name="dlanguage.plugin.path.jar" value="${plugin.zip.path}/lib/intellij-dlanguage.jar"/>
  <property name="jps-plugin.plugin.path.jar" value="${plugin.zip.path}/lib/jps/jps-plugin.jar"/>
  <property name="jps-shared.plugin.path.jar" value="${plugin.zip.path}/lib/jps-shared.jar"/>

  <!-- Set jdk.home if not specified in build.properties. -->
  <condition property="jdk.home" value="${java.home}/..">
    <not>
      <isset property="jdk.home"/>
    </not>
  </condition>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!--
  <property name="skip.tests" value="true"/>
   -->

  <!-- Compiler options -->

  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="500m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.ane"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>

  <!-- JDK definitions -->

  <property name="jdk.bin" value="${jdk.home}/bin"/>
  <path id="jdk.classpath">
    <fileset dir="${jdk.home}">
      <include name="lib/ant-javafx.jar"/>
      <include name="lib/dt.jar"/>
      <include name="lib/javafx-doclet.jar"/>
      <include name="lib/javafx-mx.jar"/>
      <include name="lib/jconsole.jar"/>
      <include name="lib/sa-jdi.jar"/>
      <include name="lib/tools.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/htmlconverter.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxrt.jar"/>
      <include name="jre/lib/JObjC.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
    </fileset>
    <pathelement location="${idea.home}/lib/junit-4.11.jar" />
    <fileset dir="${idea.home}" includes="**/*.jar">
      <exclude name="lib/ant/lib/**"/>
    </fileset>
  </path>

  <property name="project.jdk.home" value="${jdk.home}"/>
  <property name="project.jdk.bin" value="${jdk.bin}"/>
  <property name="project.jdk.classpath" value="jdk.classpath"/>


  <!-- Global Libraries -->
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <pathelement location="${javac2.home}/javac2.jar"/>
    <fileset dir="${idea.home}" includes="**/*.jar">
      <exclude name="lib/ant/lib/*"/>
    </fileset>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>

  <!-- Modules -->


  <!-- Module jps-shared -->

  <dirname property="module.jps-shared.basedir" file="${ant.file}"/>


  <property name="module.jdk.home.jps-shared" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.jps-shared" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.jps-shared" value="${project.jdk.classpath}"/>

  <property name="compiler.args.jps-shared" value="-encoding UTF-8 ${compiler.args}"/>

  <property name="jps-shared.output.dir" value="${module.jps-shared.basedir}/out/production/jps-shared"/>
  <property name="jps-shared.testoutput.dir" value="${module.jps-shared.basedir}/out/test/jps-shared"/>

  <path id="jps-shared.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="jps-shared.module.production.classpath">
    <path refid="${module.jdk.classpath.jps-shared}"/>
  </path>

  <path id="jps-shared.runtime.production.module.classpath">
    <pathelement location="${jps-shared.output.dir}"/>
  </path>

  <path id="jps-shared.module.classpath">
    <path refid="${module.jdk.classpath.jps-shared}"/>
    <pathelement location="${jps-shared.output.dir}"/>
  </path>

  <path id="jps-shared.runtime.module.classpath">
    <pathelement location="${jps-shared.testoutput.dir}"/>
    <pathelement location="${jps-shared.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.jps-shared">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.jps-shared">
    <patternset refid="excluded.from.module.jps-shared"/>
  </patternset>

  <path id="jps-shared.module.sourcepath">
    <dirset dir="${module.jps-shared.basedir}/jps-shared">
      <include name="src"/>
      <include name="resources"/>
    </dirset>
  </path>


  <target name="compile.module.jps-shared" depends="compile.module.jps-shared.production,compile.module.jps-shared.tests" description="Compile module jps-shared"/>

  <target name="compile.module.jps-shared.production" depends="register.custom.compilers" description="Compile module jps-shared; production classes">
    <mkdir dir="${jps-shared.output.dir}"/>
    <javac2 source="1.7" target="1.7" destdir="${jps-shared.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.jps-shared}/javac">
      <compilerarg line="${compiler.args.jps-shared}"/>
      <bootclasspath refid="jps-shared.module.bootclasspath"/>
      <classpath refid="jps-shared.module.production.classpath"/>
      <src refid="jps-shared.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jps-shared"/>
    </javac2>

    <copy todir="${jps-shared.output.dir}">
      <fileset dir="${module.jps-shared.basedir}/jps-shared/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.jps-shared.basedir}/jps-shared/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.jps-shared.tests" depends="register.custom.compilers,compile.module.jps-shared.production" description="compile module jps-shared; test classes" unless="skip.tests"/>

  <target name="clean.module.jps-shared" description="cleanup module">
    <delete dir="${jps-shared.output.dir}"/>
    <delete dir="${jps-shared.testoutput.dir}"/>
  </target>

  <!-- Module DLanguage -->

  <property name="module.jdk.home.dlanguage" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.dlanguage" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.dlanguage" value="${project.jdk.classpath}"/>

  <property name="compiler.args.dlanguage" value="-encoding UTF-8 ${compiler.args}"/>

  <property name="dlanguage.output.dir" value="${module.dlanguage.basedir}/out/production/DLanguage"/>
  <property name="dlanguage.testoutput.dir" value="${module.dlanguage.basedir}/out/test/DLanguage"/>

  <path id="dlanguage.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="dlanguage.module.production.classpath">
    <path refid="${module.jdk.classpath.dlanguage}"/>
    <pathelement path="${jps-shared.output.dir}"/>
  </path>

  <path id="dlanguage.runtime.production.module.classpath">
    <pathelement location="${dlanguage.output.dir}"/>
  </path>

  <path id="dlanguage.module.classpath">
    <path refid="${module.jdk.classpath.dlanguage}"/>
    <pathelement location="${dlanguage.output.dir}"/>
  </path>

  <path id="dlanguage.runtime.module.classpath">
    <pathelement location="${dlanguage.testoutput.dir}"/>
    <pathelement location="${dlanguage.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.dlanguage">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.dlanguage">
    <patternset refid="excluded.from.module.dlanguage"/>
  </patternset>

  <path id="dlanguage.module.sourcepath">
    <dirset dir="${module.dlanguage.basedir}">
      <include name="src"/>
      <!--<include name="gen"/>-->
      <include name="resources"/>
    </dirset>
  </path>

  <path id="dlanguage.module.test.sourcepath">
    <dirset dir="${module.dlanguage.basedir}">
      <include name="tests"/>
    </dirset>
  </path>


  <target name="compile.module.dlanguage" depends="compile.module.dlanguage.production,compile.module.dlanguage.tests" description="Compile module DLanguage"/>

  <target name="compile.module.dlanguage.production" depends="register.custom.compilers" description="Compile module DLanguage; production classes">
    <mkdir dir="${dlanguage.output.dir}"/>
    <javac2 source="1.7" target="1.7" destdir="${dlanguage.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.dlanguage}/javac">
      <compilerarg line="${compiler.args.dlanguage}"/>
      <bootclasspath refid="dlanguage.module.bootclasspath"/>
      <classpath refid="dlanguage.module.production.classpath"/>
      <src refid="dlanguage.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.dlanguage"/>
    </javac2>

    <copy todir="${dlanguage.output.dir}">
      <fileset dir="${module.dlanguage.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <!--<fileset dir="${module.dlanguage.basedir}/gen">-->
        <!--<patternset refid="compiler.resources"/>-->
        <!--<type type="file"/>-->
      <!--</fileset>-->
      <fileset dir="${module.dlanguage.basedir}/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <path id="dlanguage.module.tests.classpath">
    <fileset dir="${plugin.zip.path}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="compile.module.dlanguage.tests" depends="register.custom.compilers,compile.module.dlanguage.production,plugin.build.jar.jps-shared" description="compile module DLanguage; test classes" unless="skip.tests">
    <mkdir dir="${dlanguage.testoutput.dir}"/>
    <javac2 source="1.7" target="1.7" destdir="${dlanguage.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.dlanguage}/javac">
      <compilerarg line="${compiler.args.dlanguage}"/>
      <bootclasspath refid="dlanguage.module.bootclasspath"/>
      <classpath refid="dlanguage.module.classpath"/>
      <classpath refid="dlanguage.module.tests.classpath"/>
      <src refid="dlanguage.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.dlanguage"/>
    </javac2>

    <copy todir="${dlanguage.testoutput.dir}">
      <fileset dir="${module.dlanguage.basedir}/tests">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="clean.module.dlanguage" description="cleanup module">
    <delete dir="${dlanguage.output.dir}"/>
    <delete dir="${dlanguage.testoutput.dir}"/>
  </target>

  <!-- Build archive for plugin 'DLanguage' -->
  <target name="plugin.build.jar.dlanguage" depends="compile.module.dlanguage" description="Build plugin archive for module &#39;DLanguage&#39;">
    <jar destfile="${dlanguage.plugin.path.jar}" duplicate="preserve">
      <zipfileset dir="${module.dlanguage.basedir}/out/production/DLanguage"/>
      <zipfileset file="${module.dlanguage.basedir}/META-INF/plugin.xml" prefix="META-INF"/>
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
    </jar>
  </target>

  <!-- Build archive for plugin 'jps-plugin' -->
  <target name="plugin.build.jar.jps-plugin" depends="compile.module.jps-plugin" description="Build plugin archive for module &#39;jps-plugin&#39;">
    <jar destfile="${jps-plugin.plugin.path.jar}" duplicate="preserve">
      <zipfileset dir="${jps-plugin.output.dir}"/>
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
    </jar>
  </target>

  <!-- Build archive for plugin 'jps-shared' -->
  <target name="plugin.build.jar.jps-shared" depends="compile.module.jps-shared" description="Build plugin archive for module &#39;jps-shared&#39;">
    <jar destfile="${jps-shared.plugin.path.jar}" duplicate="preserve">
      <zipfileset dir="${jps-shared.output.dir}"/>
      <manifest>
        <attribute name="Created-By" value="IntelliJ IDEA"/>
        <attribute name="Manifest-Version" value="1.0"/>
      </manifest>
    </jar>
  </target>

  <!-- Build the plugin zip archive -->
  <target name="build.zip" depends="plugin.build.jar.jps-plugin, plugin.build.jar.jps-shared, plugin.build.jar.dlanguage">
    <zip basedir="${plugin.zip.path}" destfile="${plugin.zip.path.output}"/>
  </target>

  <!-- Module jps-plugin -->

  <dirname property="module.jps-plugin.basedir" file="${ant.file}"/>

  <property name="module.jdk.home.jps-plugin" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.jps-plugin" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.jps-plugin" value="${project.jdk.classpath}"/>

  <property name="compiler.args.jps-plugin" value="-encoding UTF-8 ${compiler.args}"/>

  <property name="jps-plugin.output.dir" value="${module.jps-plugin.basedir}/out/production/jps-plugin"/>
  <property name="jps-plugin.testoutput.dir" value="${module.jps-plugin.basedir}/out/test/jps-plugin"/>

  <path id="jps-plugin.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="jps-plugin.module.production.classpath">
    <path refid="${module.jdk.classpath.jps-plugin}"/>
    <pathelement path="${jps-shared.output.dir}"/>
  </path>

  <path id="jps-plugin.runtime.production.module.classpath">
    <pathelement location="${jps-plugin.output.dir}"/>
  </path>

  <path id="jps-plugin.module.classpath">
    <path refid="${module.jdk.classpath.jps-plugin}"/>
    <pathelement location="${jps-plugin.output.dir}"/>
  </path>

  <path id="jps-plugin.runtime.module.classpath">
    <pathelement location="${jps-plugin.testoutput.dir}"/>
    <pathelement location="${jps-plugin.output.dir}"/>
  </path>


  <patternset id="excluded.from.module.jps-plugin">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.jps-plugin">
    <patternset refid="excluded.from.module.jps-plugin"/>
  </patternset>

  <path id="jps-plugin.module.sourcepath">
    <dirset dir="${module.jps-plugin.basedir}/jps-plugin">
      <include name="src"/>
      <include name="resources"/>
    </dirset>
  </path>


  <target name="compile.module.jps-plugin" depends="compile.module.jps-plugin.production,compile.module.jps-plugin.tests" description="Compile module jps-plugin"/>

  <target name="compile.module.jps-plugin.production" depends="register.custom.compilers" description="Compile module jps-plugin; production classes">
    <mkdir dir="${jps-plugin.output.dir}"/>
    <javac2 source="1.7" target="1.7" destdir="${jps-plugin.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.jps-plugin}/javac">
      <compilerarg line="${compiler.args.jps-plugin}"/>
      <bootclasspath refid="jps-plugin.module.bootclasspath"/>
      <classpath refid="jps-plugin.module.production.classpath"/>
      <src refid="jps-plugin.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jps-plugin"/>
    </javac2>

    <copy todir="${jps-plugin.output.dir}">
      <fileset dir="${module.jps-plugin.basedir}/jps-plugin/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.jps-plugin.basedir}/jps-plugin/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.jps-plugin.tests" depends="register.custom.compilers,compile.module.jps-plugin.production" description="compile module jps-plugin; test classes" unless="skip.tests"/>

  <target name="clean.module.jps-plugin" description="cleanup module">
    <delete dir="${jps-plugin.output.dir}"/>
    <delete dir="${jps-plugin.testoutput.dir}"/>
  </target>

  <target name="init" description="Build initialization">
    <echo message="Using IDEA home: ${idea.home}"/>
    <echo message="Using JDK home: ${jdk.home}"/>
  </target>



  <target name="test" depends="build.modules">
    <property name="suspend" value="n"/>

    <junit printsummary="yes" haltonfailure="false" showoutput="yes" failureproperty="failureFound"
           fork="yes" forkmode="once" reloading="no">
      <jvmarg value="-Didea.home.path=${idea.home}"/>
      <jvmarg value="-Xbootclasspath/a:${idea.home}/lib/boot.jar"/>
      <jvmarg value="-Dfile.encoding=UTF-8"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-Didea.plugins.path=${idea.home}/plugins"/>
      <jvmarg value="-Didea.launcher.bin.path=${idea.home}/bin"/>
      <classpath location=".">
        <pathelement location="${idea.home}/lib/junit-4.11.jar" />
        <fileset dir="${idea.home}" includes="**/*.jar">
          <exclude name="lib/ant/lib/*"/>
        </fileset>
        <fileset dir="${java.home}/../lib" includes="**/*.jar" />
        <path refid="dlanguage.module.classpath"/>
        <path refid="dlanguage.module.tests.classpath"/>
        <pathelement location="${dlanguage.testoutput.dir}"/>
      </classpath>
      <formatter type="brief" usefile="false"/>
      <test name="net.masterthought.dlanguage.DTestCase"/>
    </junit>
  </target>

  <target name="check.test" if="failureFound" depends="test">
    <fail message="Test failure."/>
  </target>

  <target name="clean" depends="clean.module.dlanguage, clean.module.jps-plugin, clean.module.jps-shared" description="cleanup all"/>

  <target name="build.modules" depends="init, clean, compile.module.jps-shared, compile.module.jps-plugin, build.zip" description="build all modules"/>

  <target name="all" depends="check.test" description="build all"/>
</project>
