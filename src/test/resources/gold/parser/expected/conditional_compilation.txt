D Language File
  DLanguageDeclDefsImpl(DECL_DEFS)
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBasicTypeXImpl(BASIC_TYPE_X)
              PsiElement(DLanguageTokenType.int)('int')
          DLanguageDeclaratorsImpl(DECLARATORS)
            DECLARATOR_INITIALIZER
              DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('k')
          PsiElement(DLanguageTokenType.;)(';')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('Demo')
            PsiElement(DLanguageTokenType.))(')')
        PsiComment(DLanguageTokenType.LINE_COMMENT)('// compile in this code block for the demo version')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          DLanguageDeclDefsImpl(DECL_DEFS)
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageDeclarationImpl(DECLARATION)
                DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                      PsiElement(DLanguageTokenType.int)('int')
                  DLanguageDeclaratorsImpl(DECLARATORS)
                    DECLARATOR_INITIALIZER
                      DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('i')
                  PsiElement(DLanguageTokenType.;)(';')
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageDeclarationImpl(DECLARATION)
                DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                      PsiElement(DLanguageTokenType.int)('int')
                  DLanguageDeclaratorsImpl(DECLARATORS)
                    DECLARATOR_INITIALIZER
                      DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('k')
                  PsiElement(DLanguageTokenType.;)(';')
            PsiComment(DLanguageTokenType.LINE_COMMENT)('// error, k already defined')
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageDeclarationImpl(DECLARATION)
                DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                  DLanguageAutoDeclarationImpl(AUTO_DECLARATION)
                    DLanguageAutoDeclarationXImpl(AUTO_DECLARATION_X)
                      AUTO_DECLARATION_Y
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('i')
                        PsiElement(DLanguageTokenType.=)('=')
                        DLanguageInitializerImpl(INITIALIZER)
                          DLanguageNonVoidInitializerImpl(NON_VOID_INITIALIZER)
                            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                    PsiElement(DLanguageTokenType.INTEGER_LITERAL)('3')
                    PsiElement(DLanguageTokenType.;)(';')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
          DLanguageAutoDeclarationImpl(AUTO_DECLARATION)
            DLanguageAutoDeclarationXImpl(AUTO_DECLARATION_X)
              AUTO_DECLARATION_Y
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('x')
                PsiElement(DLanguageTokenType.=)('=')
                DLanguageInitializerImpl(INITIALIZER)
                  DLanguageNonVoidInitializerImpl(NON_VOID_INITIALIZER)
                    DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                      DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                        DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                          DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                            IDENTIFIER
                              PsiElement(DLanguageTokenType.ID)('i')
            PsiElement(DLanguageTokenType.;)(';')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// uses the i declared above')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('X86')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
        PsiElement(DLanguageTokenType.else)('else')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('ProfessionalEdition')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          DLanguageDeclDefsImpl(DECL_DEFS)
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageVersionSpecificationImpl(VERSION_SPECIFICATION)
                PsiElement(DLanguageTokenType.version)('version')
                PsiElement(DLanguageTokenType.=)('=')
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('FeatureA')
                PsiElement(DLanguageTokenType.;)(';')
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageVersionSpecificationImpl(VERSION_SPECIFICATION)
                PsiElement(DLanguageTokenType.version)('version')
                PsiElement(DLanguageTokenType.=)('=')
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('FeatureB')
                PsiElement(DLanguageTokenType.;)(';')
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageVersionSpecificationImpl(VERSION_SPECIFICATION)
                PsiElement(DLanguageTokenType.version)('version')
                PsiElement(DLanguageTokenType.=)('=')
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('FeatureC')
                PsiElement(DLanguageTokenType.;)(';')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('HomeEdition')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          DLanguageDeclDefsImpl(DECL_DEFS)
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageVersionSpecificationImpl(VERSION_SPECIFICATION)
                PsiElement(DLanguageTokenType.version)('version')
                PsiElement(DLanguageTokenType.=)('=')
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('FeatureA')
                PsiElement(DLanguageTokenType.;)(';')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('FeatureB')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('Foo')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          DLanguageDeclDefsImpl(DECL_DEFS)
            DLanguageDeclDefImpl(DECL_DEF)
              DLanguageDeclarationImpl(DECLARATION)
                DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                      PsiElement(DLanguageTokenType.int)('int')
                  DLanguageDeclaratorsImpl(DECLARATORS)
                    DECLARATOR_INITIALIZER
                      DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('x')
                  PsiElement(DLanguageTokenType.;)(';')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageVersionSpecificationImpl(VERSION_SPECIFICATION)
        PsiElement(DLanguageTokenType.version)('version')
        PsiElement(DLanguageTokenType.=)('=')
        IDENTIFIER
          PsiElement(DLanguageTokenType.ID)('Foo')
        PsiElement(DLanguageTokenType.;)(';')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// error, Foo already used')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageAggregateDeclarationImpl(AGGREGATE_DECLARATION)
          CLASS_DECLARATION
            PsiElement(DLanguageTokenType.class)('class')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('Foo')
            DLanguageAggregateBodyImpl(AGGREGATE_BODY)
              PsiElement(DLanguageTokenType.{)('{')
              DLanguageDeclDefsImpl(DECL_DEFS)
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageDeclarationImpl(DECLARATION)
                    DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                      DLanguageBasicTypeImpl(BASIC_TYPE)
                        DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                          PsiElement(DLanguageTokenType.int)('int')
                      DLanguageDeclaratorsImpl(DECLARATORS)
                        DECLARATOR_INITIALIZER
                          DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                            IDENTIFIER
                              PsiElement(DLanguageTokenType.ID)('a')
                        PsiElement(DLanguageTokenType.,)(',')
                        DLanguageDeclaratorIdentifierListImpl(DECLARATOR_IDENTIFIER_LIST)
                          DLanguageDeclaratorIdentifierImpl(DECLARATOR_IDENTIFIER)
                            DLanguageAltDeclaratorIdentifierImpl(ALT_DECLARATOR_IDENTIFIER)
                              IDENTIFIER
                                PsiElement(DLanguageTokenType.ID)('b')
                      PsiElement(DLanguageTokenType.;)(';')
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
                    DLanguageConditionImpl(CONDITION)
                      DLanguageVersionConditionImpl(VERSION_CONDITION)
                        PsiElement(DLanguageTokenType.version)('version')
                        PsiElement(DLanguageTokenType.()('(')
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('full')
                        PsiElement(DLanguageTokenType.))(')')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      PsiElement(DLanguageTokenType.{)('{')
                      DLanguageDeclDefsImpl(DECL_DEFS)
                        DLanguageDeclDefImpl(DECL_DEF)
                          DLanguageDeclarationImpl(DECLARATION)
                            FUNC_DECLARATION
                              DLanguageBasicTypeImpl(BASIC_TYPE)
                                DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                  PsiElement(DLanguageTokenType.int)('int')
                              IDENTIFIER
                                PsiElement(DLanguageTokenType.ID)('extrafunctionality')
                              DLanguageParametersImpl(PARAMETERS)
                                PsiElement(DLanguageTokenType.()('(')
                                PsiElement(DLanguageTokenType.))(')')
                              DLanguageFunctionBodyImpl(FUNCTION_BODY)
                                DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                                  PsiElement(DLanguageTokenType.{)('{')
                                  DLanguageStatementListImpl(STATEMENT_LIST)
                                    DLanguageStatementImpl(STATEMENT)
                                      DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                        DLanguageReturnStatementImpl(RETURN_STATEMENT)
                                          PsiElement(DLanguageTokenType.return)('return')
                                          DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                                            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                    PsiElement(DLanguageTokenType.INTEGER_LITERAL)('1')
                                          PsiElement(DLanguageTokenType.;)(';')
                                  PsiComment(DLanguageTokenType.LINE_COMMENT)('// extra functionality is supported')
                                  PsiElement(DLanguageTokenType.})('}')
                      PsiElement(DLanguageTokenType.})('}')
                    PsiElement(DLanguageTokenType.else)('else')
                    PsiComment(DLanguageTokenType.LINE_COMMENT)('// demo')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      PsiElement(DLanguageTokenType.{)('{')
                      DLanguageDeclDefsImpl(DECL_DEFS)
                        DLanguageDeclDefImpl(DECL_DEF)
                          DLanguageDeclarationImpl(DECLARATION)
                            FUNC_DECLARATION
                              DLanguageBasicTypeImpl(BASIC_TYPE)
                                DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                  PsiElement(DLanguageTokenType.int)('int')
                              IDENTIFIER
                                PsiElement(DLanguageTokenType.ID)('extrafunctionality')
                              DLanguageParametersImpl(PARAMETERS)
                                PsiElement(DLanguageTokenType.()('(')
                                PsiElement(DLanguageTokenType.))(')')
                              DLanguageFunctionBodyImpl(FUNCTION_BODY)
                                DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                                  PsiElement(DLanguageTokenType.{)('{')
                                  DLanguageStatementListImpl(STATEMENT_LIST)
                                    DLanguageStatementImpl(STATEMENT)
                                      DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                        DLanguageReturnStatementImpl(RETURN_STATEMENT)
                                          PsiElement(DLanguageTokenType.return)('return')
                                          DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                                            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                    PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                                          PsiElement(DLanguageTokenType.;)(';')
                                  PsiComment(DLanguageTokenType.LINE_COMMENT)('// extra functionality is not supported')
                                  PsiElement(DLanguageTokenType.})('}')
                      PsiElement(DLanguageTokenType.})('}')
              PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('n')
            PsiElement(DLanguageTokenType.))(')')
        PsiComment(DLanguageTokenType.LINE_COMMENT)('// add in version code if version level is >= n')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('identifier')
            PsiElement(DLanguageTokenType.))(')')
        PsiComment(DLanguageTokenType.LINE_COMMENT)('// add in version code if version')
        PsiComment(DLanguageTokenType.LINE_COMMENT)('// keyword is identifier')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DLanguageTokenType.version)('version')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('DigitalMars_funky_extension')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageAggregateDeclarationImpl(AGGREGATE_DECLARATION)
          CLASS_DECLARATION
            PsiElement(DLanguageTokenType.class)('class')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('Foo')
            DLanguageAggregateBodyImpl(AGGREGATE_BODY)
              PsiElement(DLanguageTokenType.{)('{')
              DLanguageDeclDefsImpl(DECL_DEFS)
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageDeclarationImpl(DECLARATION)
                    DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                      DLanguageBasicTypeImpl(BASIC_TYPE)
                        DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                          PsiElement(DLanguageTokenType.int)('int')
                      DLanguageDeclaratorsImpl(DECLARATORS)
                        DECLARATOR_INITIALIZER
                          DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                            IDENTIFIER
                              PsiElement(DLanguageTokenType.ID)('a')
                        PsiElement(DLanguageTokenType.,)(',')
                        DLanguageDeclaratorIdentifierListImpl(DECLARATOR_IDENTIFIER_LIST)
                          DLanguageDeclaratorIdentifierImpl(DECLARATOR_IDENTIFIER)
                            DLanguageAltDeclaratorIdentifierImpl(ALT_DECLARATOR_IDENTIFIER)
                              IDENTIFIER
                                PsiElement(DLanguageTokenType.ID)('b')
                      PsiElement(DLanguageTokenType.;)(';')
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
                    DLanguageConditionImpl(CONDITION)
                      DLanguageDebugConditionImpl(DEBUG_CONDITION)
                        PsiElement(DLanguageTokenType.debug)('debug')
                    PsiElement(DLanguageTokenType.:)(':')
                    DLanguageDeclDefsImpl(DECL_DEFS)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('flag')
                            PsiElement(DLanguageTokenType.;)(';')
              PsiElement(DLanguageTokenType.})('}')
  DLanguageStatementImpl(STATEMENT)
    DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageConditionImpl(CONDITION)
          DLanguageDebugConditionImpl(DEBUG_CONDITION)
            PsiElement(DLanguageTokenType.debug)('debug')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('foo')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageStatementImpl(STATEMENT)
          DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                  DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                    DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                      DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                        IDENTIFIER
                          PsiElement(DLanguageTokenType.ID)('writeln')
                  DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                    DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                      DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                        PsiElement(DLanguageTokenType.()('(')
                        DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  DLanguageStringLiteralsImpl(STRING_LITERALS)
                                    DLanguageStringLiteralImpl(STRING_LITERAL)
                                      PsiElement(DLanguageTokenType.DOUBLE_QUOTED_STRING)('"Foo"')
                        PsiElement(DLanguageTokenType.))(')')
              PsiElement(DLanguageTokenType.;)(';')
  DLanguageDeclDefsImpl(DECL_DEFS)
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDebugSpecificationImpl(DEBUG_SPECIFICATION)
        PsiElement(DLanguageTokenType.debug)('debug')
        PsiElement(DLanguageTokenType.=)('=')
        IDENTIFIER
          PsiElement(DLanguageTokenType.ID)('foo')
        PsiElement(DLanguageTokenType.;)(';')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// error, foo used before set')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageDebugConditionImpl(DEBUG_CONDITION)
            PsiElement(DLanguageTokenType.debug)('debug')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('IntegerLiteral')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// add in debug code if debug level is >= IntegerLiteral')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageDebugConditionImpl(DEBUG_CONDITION)
            PsiElement(DLanguageTokenType.debug)('debug')
            PsiElement(DLanguageTokenType.()('(')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('identifier')
            PsiElement(DLanguageTokenType.))(')')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          PsiElement(DLanguageTokenType.{)('{')
          PsiElement(DLanguageTokenType.})('}')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// add in debug code if debug keyword is identifier')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageAttributeSpecifierImpl(ATTRIBUTE_SPECIFIER)
        DLanguageAttributeImpl(ATTRIBUTE)
          PsiElement(DLanguageTokenType.const)('const')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          DLanguageDeclDefImpl(DECL_DEF)
            DLanguageDeclarationImpl(DECLARATION)
              DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                    PsiElement(DLanguageTokenType.int)('int')
                DLanguageDeclaratorsImpl(DECLARATORS)
                  DECLARATOR_INITIALIZER
                    DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                      IDENTIFIER
                        PsiElement(DLanguageTokenType.ID)('i')
                    PsiElement(DLanguageTokenType.=)('=')
                    DLanguageInitializerImpl(INITIALIZER)
                      DLanguageNonVoidInitializerImpl(NON_VOID_INITIALIZER)
                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                            DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                              DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                PsiElement(DLanguageTokenType.INTEGER_LITERAL)('3')
                PsiElement(DLanguageTokenType.;)(';')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBasicTypeXImpl(BASIC_TYPE_X)
              PsiElement(DLanguageTokenType.int)('int')
          DLanguageDeclaratorsImpl(DECLARATORS)
            DECLARATOR_INITIALIZER
              DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('j')
              PsiElement(DLanguageTokenType.=)('=')
              DLanguageInitializerImpl(INITIALIZER)
                DLanguageNonVoidInitializerImpl(NON_VOID_INITIALIZER)
                  DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                    DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                      DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                        DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                          PsiElement(DLanguageTokenType.INTEGER_LITERAL)('4')
          PsiElement(DLanguageTokenType.;)(';')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
        DLanguageConditionImpl(CONDITION)
          DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
            PsiElement(DLanguageTokenType.static)('static')
            PsiElement(DLanguageTokenType.if)('if')
            PsiElement(DLanguageTokenType.()('(')
            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                    IDENTIFIER
                      PsiElement(DLanguageTokenType.ID)('i')
              DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                PsiElement(DLanguageTokenType.==)('==')
                DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                  DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                    DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                      PsiElement(DLanguageTokenType.INTEGER_LITERAL)('3')
            PsiElement(DLanguageTokenType.))(')')
        PsiComment(DLanguageTokenType.LINE_COMMENT)('// ok, at module scope')
        DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
          DLanguageDeclDefImpl(DECL_DEF)
            DLanguageDeclarationImpl(DECLARATION)
              DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                    PsiElement(DLanguageTokenType.int)('int')
                DLanguageDeclaratorsImpl(DECLARATORS)
                  DECLARATOR_INITIALIZER
                    DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                      IDENTIFIER
                        PsiElement(DLanguageTokenType.ID)('x')
                PsiElement(DLanguageTokenType.;)(';')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageAggregateDeclarationImpl(AGGREGATE_DECLARATION)
          CLASS_DECLARATION
            PsiElement(DLanguageTokenType.class)('class')
            IDENTIFIER
              PsiElement(DLanguageTokenType.ID)('C')
            DLanguageAggregateBodyImpl(AGGREGATE_BODY)
              PsiElement(DLanguageTokenType.{)('{')
              DLanguageDeclDefsImpl(DECL_DEFS)
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageAttributeSpecifierImpl(ATTRIBUTE_SPECIFIER)
                    DLanguageAttributeImpl(ATTRIBUTE)
                      PsiElement(DLanguageTokenType.const)('const')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('k')
                                PsiElement(DLanguageTokenType.=)('=')
                                DLanguageInitializerImpl(INITIALIZER)
                                  DLanguageNonVoidInitializerImpl(NON_VOID_INITIALIZER)
                                    DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                      DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                        DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                          DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                            PsiElement(DLanguageTokenType.INTEGER_LITERAL)('5')
                            PsiElement(DLanguageTokenType.;)(';')
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
                    DLanguageConditionImpl(CONDITION)
                      DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                        PsiElement(DLanguageTokenType.static)('static')
                        PsiElement(DLanguageTokenType.if)('if')
                        PsiElement(DLanguageTokenType.()('(')
                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                            DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                              DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                IDENTIFIER
                                  PsiElement(DLanguageTokenType.ID)('i')
                          DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                            PsiElement(DLanguageTokenType.==)('==')
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  PsiElement(DLanguageTokenType.INTEGER_LITERAL)('3')
                        PsiElement(DLanguageTokenType.))(')')
                    PsiComment(DLanguageTokenType.LINE_COMMENT)('// ok')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('x')
                            PsiElement(DLanguageTokenType.;)(';')
                    PsiElement(DLanguageTokenType.else)('else')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.long)('long')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('x')
                            PsiElement(DLanguageTokenType.;)(';')
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
                    DLanguageConditionImpl(CONDITION)
                      DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                        PsiElement(DLanguageTokenType.static)('static')
                        PsiElement(DLanguageTokenType.if)('if')
                        PsiElement(DLanguageTokenType.()('(')
                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                            DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                              DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                IDENTIFIER
                                  PsiElement(DLanguageTokenType.ID)('j')
                          DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                            PsiElement(DLanguageTokenType.==)('==')
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  PsiElement(DLanguageTokenType.INTEGER_LITERAL)('3')
                        PsiElement(DLanguageTokenType.))(')')
                    PsiComment(DLanguageTokenType.LINE_COMMENT)('// error, j is not a constant')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('y')
                            PsiElement(DLanguageTokenType.;)(';')
                DLanguageDeclDefImpl(DECL_DEF)
                  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
                    DLanguageConditionImpl(CONDITION)
                      DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                        PsiElement(DLanguageTokenType.static)('static')
                        PsiElement(DLanguageTokenType.if)('if')
                        PsiElement(DLanguageTokenType.()('(')
                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                            DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                              DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                IDENTIFIER
                                  PsiElement(DLanguageTokenType.ID)('k')
                          DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                            PsiElement(DLanguageTokenType.==)('==')
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  PsiElement(DLanguageTokenType.INTEGER_LITERAL)('5')
                        PsiElement(DLanguageTokenType.))(')')
                    PsiComment(DLanguageTokenType.LINE_COMMENT)('// ok, k is in current scope')
                    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                      DLanguageDeclDefImpl(DECL_DEF)
                        DLanguageDeclarationImpl(DECLARATION)
                          DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorsImpl(DECLARATORS)
                              DECLARATOR_INITIALIZER
                                DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                  IDENTIFIER
                                    PsiElement(DLanguageTokenType.ID)('z')
                            PsiElement(DLanguageTokenType.;)(';')
              PsiElement(DLanguageTokenType.})('}')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        TEMPLATE_DECLARATION
          PsiElement(DLanguageTokenType.template)('template')
          IDENTIFIER
            PsiElement(DLanguageTokenType.ID)('INT')
  PsiErrorElement:<import declaration>, DLanguageTokenType.(, DLanguageTokenType.*, DLanguageTokenType.., DLanguageTokenType.;, DLanguageTokenType.@, DLanguageTokenType.ID, DLanguageTokenType.[, DLanguageTokenType.__gshared, DLanguageTokenType.abstract, DLanguageTokenType.alias, DLanguageTokenType.align, DLanguageTokenType.auto, DLanguageTokenType.bool, DLanguageTokenType.byte, DLanguageTokenType.cdouble, DLanguageTokenType.cfloat, DLanguageTokenType.char, DLanguageTokenType.class, DLanguageTokenType.const, DLanguageTokenType.creal, DLanguageTokenType.dchar, DLanguageTokenType.debug, DLanguageTokenType.delegate, DLanguageTokenType.delete, DLanguageTokenType.deprecated, DLanguageTokenType.double, DLanguageTokenType.else, DLanguageTokenType.enum, DLanguageTokenType.export, DLanguageTokenType.extern, DLanguageTokenType.final, DLanguageTokenType.float, DLanguageTokenType.function, DLanguageTokenType.idouble, DLanguageTokenType.if, DLanguageTokenType.ifloat, DLanguageTokenType.immutable, DLanguageTokenType.inout, DLanguageTokenType.int, DLanguageTokenType.interface, DLanguageTokenType.invariant, DLanguageTokenType.ireal, DLanguageTokenType.long, DLanguageTokenType.mixin, DLanguageTokenType.new, DLanguageTokenType.nothrow, DLanguageTokenType.override, DLanguageTokenType.package, DLanguageTokenType.pragma and ... expected, got '('
    <empty list>
  DLanguageStatementImpl(STATEMENT)
    DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
      DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
        DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                  DLanguageFunctionLiteralImpl(FUNCTION_LITERAL)
                    DLanguageParameterMemberAttributesImpl(PARAMETER_MEMBER_ATTRIBUTES)
                      DLanguageParametersImpl(PARAMETERS)
                        PsiElement(DLanguageTokenType.()('(')
                        DLanguageParameterListImpl(PARAMETER_LIST)
                          PARAMETER
                            DLanguageBasicTypeImpl(BASIC_TYPE)
                              DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                PsiElement(DLanguageTokenType.int)('int')
                            DLanguageDeclaratorImpl(DECLARATOR)
                              DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                                IDENTIFIER
                                  PsiElement(DLanguageTokenType.ID)('i')
                        PsiElement(DLanguageTokenType.))(')')
                    DLanguageFunctionLiteralBodyImpl(FUNCTION_LITERAL_BODY)
                      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                        PsiElement(DLanguageTokenType.{)('{')
                        DLanguageStatementListImpl(STATEMENT_LIST)
                          DLanguageStatementImpl(STATEMENT)
                            DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                              DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
                                DLanguageConditionImpl(CONDITION)
                                  DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                                    PsiElement(DLanguageTokenType.static)('static')
                                    PsiElement(DLanguageTokenType.if)('if')
                                    PsiElement(DLanguageTokenType.()('(')
                                    DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                      DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                        DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                          DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                            IDENTIFIER
                                              PsiElement(DLanguageTokenType.ID)('i')
                                      DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                                        PsiElement(DLanguageTokenType.==)('==')
                                        DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                            DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                              PsiElement(DLanguageTokenType.INTEGER_LITERAL)('32')
                                    PsiElement(DLanguageTokenType.))(')')
                                DLanguageStatementImpl(STATEMENT)
                                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                    DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
                                      DLanguageDeclarationImpl(DECLARATION)
                                        DLanguageAliasDeclarationImpl(ALIAS_DECLARATION)
                                          ALIAS_DECLARATION_SINGLE
                                            PsiElement(DLanguageTokenType.alias)('alias')
                                            IDENTIFIER
                                              PsiElement(DLanguageTokenType.ID)('INT')
                                            PsiElement(DLanguageTokenType.=)('=')
                                            DLanguageTypeImpl(TYPE)
                                              DLanguageTypeCtorsImpl(TYPE_CTORS)
                                                <empty list>
                                              DLanguageBasicTypeImpl(BASIC_TYPE)
                                                DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                                  PsiElement(DLanguageTokenType.int)('int')
                                            PsiElement(DLanguageTokenType.;)(';')
                                PsiElement(DLanguageTokenType.else)('else')
                                DLanguageStatementImpl(STATEMENT)
                                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                    DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
                                      DLanguageConditionImpl(CONDITION)
                                        DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                                          PsiElement(DLanguageTokenType.static)('static')
                                          PsiElement(DLanguageTokenType.if)('if')
                                          PsiElement(DLanguageTokenType.()('(')
                                          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                  IDENTIFIER
                                                    PsiElement(DLanguageTokenType.ID)('i')
                                            DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                                              PsiElement(DLanguageTokenType.==)('==')
                                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                    PsiElement(DLanguageTokenType.INTEGER_LITERAL)('16')
                                          PsiElement(DLanguageTokenType.))(')')
                                      DLanguageStatementImpl(STATEMENT)
                                        DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                          DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
                                            DLanguageDeclarationImpl(DECLARATION)
                                              DLanguageAliasDeclarationImpl(ALIAS_DECLARATION)
                                                ALIAS_DECLARATION_SINGLE
                                                  PsiElement(DLanguageTokenType.alias)('alias')
                                                  IDENTIFIER
                                                    PsiElement(DLanguageTokenType.ID)('INT')
                                                  PsiElement(DLanguageTokenType.=)('=')
                                                  DLanguageTypeImpl(TYPE)
                                                    DLanguageTypeCtorsImpl(TYPE_CTORS)
                                                      <empty list>
                                                    DLanguageBasicTypeImpl(BASIC_TYPE)
                                                      DLanguageBasicTypeXImpl(BASIC_TYPE_X)
                                                        PsiElement(DLanguageTokenType.short)('short')
                                                  PsiElement(DLanguageTokenType.;)(';')
                                      PsiElement(DLanguageTokenType.else)('else')
                                      DLanguageStatementImpl(STATEMENT)
                                        DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                          DLanguageStaticAssertImpl(STATIC_ASSERT)
                                            PsiElement(DLanguageTokenType.static)('static')
                                            PsiElement(DLanguageTokenType.assert)('assert')
                                            PsiElement(DLanguageTokenType.()('(')
                                            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                                DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                  DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                    PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                                            PsiElement(DLanguageTokenType.))(')')
                                            PsiElement(DLanguageTokenType.;)(';')
                        PsiComment(DLanguageTokenType.LINE_COMMENT)('// not supported')
                        PsiElement(DLanguageTokenType.})('}')
            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                  DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                    IDENTIFIER
                      PsiElement(DLanguageTokenType.ID)('INT')
                    DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                      PsiElement(DLanguageTokenType.!)('!')
                      PsiElement(DLanguageTokenType.()('(')
                      DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                        DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  PsiElement(DLanguageTokenType.INTEGER_LITERAL)('32')
                      PsiElement(DLanguageTokenType.))(')')
            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                  IDENTIFIER
                    PsiElement(DLanguageTokenType.ID)('a')
        PsiElement(DLanguageTokenType.;)(';')
  PsiComment(DLanguageTokenType.LINE_COMMENT)('// a is an int')
  DLanguageDeclDefsImpl(DECL_DEFS)
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageIdentifierListImpl(IDENTIFIER_LIST)
              IDENTIFIER
                PsiElement(DLanguageTokenType.ID)('INT')
              DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                  PsiElement(DLanguageTokenType.!)('!')
                  PsiElement(DLanguageTokenType.()('(')
                  DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                    DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                      DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                        DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                            DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                              PsiElement(DLanguageTokenType.INTEGER_LITERAL)('16')
                  PsiElement(DLanguageTokenType.))(')')
          DLanguageDeclaratorsImpl(DECLARATORS)
            DECLARATOR_INITIALIZER
              DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('b')
          PsiElement(DLanguageTokenType.;)(';')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// b is a short')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        DLanguageVarDeclarationsImpl(VAR_DECLARATIONS)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageIdentifierListImpl(IDENTIFIER_LIST)
              IDENTIFIER
                PsiElement(DLanguageTokenType.ID)('INT')
              DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                  PsiElement(DLanguageTokenType.!)('!')
                  PsiElement(DLanguageTokenType.()('(')
                  DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                    DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                      DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                        DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                            DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                              PsiElement(DLanguageTokenType.INTEGER_LITERAL)('17')
                  PsiElement(DLanguageTokenType.))(')')
          DLanguageDeclaratorsImpl(DECLARATORS)
            DECLARATOR_INITIALIZER
              DLanguageVarDeclaratorImpl(VAR_DECLARATOR)
                IDENTIFIER
                  PsiElement(DLanguageTokenType.ID)('c')
          PsiElement(DLanguageTokenType.;)(';')
    PsiComment(DLanguageTokenType.LINE_COMMENT)('// error, static assert trips')
    DLanguageDeclDefImpl(DECL_DEF)
      DLanguageDeclarationImpl(DECLARATION)
        FUNC_DECLARATION
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBasicTypeXImpl(BASIC_TYPE_X)
              PsiElement(DLanguageTokenType.void)('void')
          IDENTIFIER
            PsiElement(DLanguageTokenType.ID)('foo')
          DLanguageParametersImpl(PARAMETERS)
            PsiElement(DLanguageTokenType.()('(')
            PsiElement(DLanguageTokenType.))(')')
          DLanguageFunctionBodyImpl(FUNCTION_BODY)
            DLanguageBlockStatementImpl(BLOCK_STATEMENT)
              PsiElement(DLanguageTokenType.{)('{')
              DLanguageStatementListImpl(STATEMENT_LIST)
                DLanguageStatementImpl(STATEMENT)
                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                    DLanguageIfStatementImpl(IF_STATEMENT)
                      PsiElement(DLanguageTokenType.if)('if')
                      PsiElement(DLanguageTokenType.()('(')
                      DLanguageIfConditionImpl(IF_CONDITION)
                        DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                            DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                              DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                      PsiElement(DLanguageTokenType.))(')')
                      DLanguageThenStatementImpl(THEN_STATEMENT)
                        DLanguageScopeStatementImpl(SCOPE_STATEMENT)
                          DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                            DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                              PsiElement(DLanguageTokenType.{)('{')
                              DLanguageStatementListImpl(STATEMENT_LIST)
                                DLanguageStatementImpl(STATEMENT)
                                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                    DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
                                      DLanguageCommaExpressionImpl(COMMA_EXPRESSION)
                                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                            DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                              DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
                                                  PsiElement(DLanguageTokenType.assert)('assert')
                                                  PsiElement(DLanguageTokenType.()('(')
                                                  DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                                    DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                                      DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                                        DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                                          PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                                                  PsiElement(DLanguageTokenType.))(')')
                                      PsiElement(DLanguageTokenType.;)(';')
                                PsiComment(DLanguageTokenType.LINE_COMMENT)('// never trips')
                                DLanguageStatementImpl(STATEMENT)
                                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                    DLanguageStaticAssertImpl(STATIC_ASSERT)
                                      PsiElement(DLanguageTokenType.static)('static')
                                      PsiElement(DLanguageTokenType.assert)('assert')
                                      PsiElement(DLanguageTokenType.()('(')
                                      DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                        DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                            DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                              PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                                      PsiElement(DLanguageTokenType.))(')')
                                      PsiElement(DLanguageTokenType.;)(';')
                              PsiComment(DLanguageTokenType.LINE_COMMENT)('// always trips')
                              PsiElement(DLanguageTokenType.})('}')
                DLanguageStatementImpl(STATEMENT)
                  DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                    DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
                      DLanguageConditionImpl(CONDITION)
                        DLanguageVersionConditionImpl(VERSION_CONDITION)
                          PsiElement(DLanguageTokenType.version)('version')
                          PsiElement(DLanguageTokenType.()('(')
                          IDENTIFIER
                            PsiElement(DLanguageTokenType.ID)('BAR')
                          PsiElement(DLanguageTokenType.))(')')
                      DLanguageStatementImpl(STATEMENT)
                        DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                          DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                            PsiElement(DLanguageTokenType.{)('{')
                            PsiElement(DLanguageTokenType.})('}')
                      PsiElement(DLanguageTokenType.else)('else')
                      DLanguageStatementImpl(STATEMENT)
                        DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                          DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                            PsiElement(DLanguageTokenType.{)('{')
                            DLanguageStatementListImpl(STATEMENT_LIST)
                              DLanguageStatementImpl(STATEMENT)
                                DLanguageNonEmptyStatementImpl(NON_EMPTY_STATEMENT)
                                  DLanguageStaticAssertImpl(STATIC_ASSERT)
                                    PsiElement(DLanguageTokenType.static)('static')
                                    PsiElement(DLanguageTokenType.assert)('assert')
                                    PsiElement(DLanguageTokenType.()('(')
                                    DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                                      DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                        DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
                                          DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                            PsiElement(DLanguageTokenType.INTEGER_LITERAL)('0')
                                    PsiElement(DLanguageTokenType.))(')')
                                    PsiElement(DLanguageTokenType.;)(';')
                            PsiComment(DLanguageTokenType.LINE_COMMENT)('// trips when version BAR is not defined')
                            PsiElement(DLanguageTokenType.})('}')
              PsiElement(DLanguageTokenType.})('}')