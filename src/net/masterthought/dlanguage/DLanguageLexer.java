/* The following code was generated by JFlex 1.4.3 on 12/17/14 8:49 PM */

package net.masterthought.dlanguage;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static net.masterthought.dlanguage.psi.DLanguageTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/17/14 8:49 PM from the specification file
 * <tt>/Users/kings/development/projects/DLanguage/src/net/masterthought/dlanguage/DLanguageLexer.flex</tt>
 */
public class DLanguageLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\7\1\26\1\0"+
    "\1\16\1\13\1\24\1\4\1\0\1\23\1\32\1\25\1\17\1\10"+
    "\1\11\1\14\1\12\14\0\1\22\1\2\1\15\1\33\1\3\1\66"+
    "\1\0\1\104\1\65\1\70\1\72\2\0\1\73\2\0\1\102\1\74"+
    "\1\100\1\71\1\76\1\0\1\101\1\75\1\67\1\103\1\77\2\0"+
    "\1\105\1\0\1\21\1\0\1\31\1\27\1\63\1\0\1\47\1\34"+
    "\1\42\1\43\1\41\1\46\1\53\1\50\1\52\1\0\1\62\1\36"+
    "\1\61\1\45\1\35\1\57\1\0\1\51\1\54\1\40\1\44\1\55"+
    "\1\56\1\60\1\37\1\64\1\20\1\5\1\30\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\27\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\26\0\1\67\26\0\1\70\1\71\1\0\1\72\27\0"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\4\0\1\104\7\0\1\105\33\0\1\106\1\0"+
    "\1\107\10\0\1\110\1\0\1\111\3\0\1\112\52\0"+
    "\1\113\1\0\1\114\1\115\1\116\1\117\1\120\2\0"+
    "\1\121\1\122\3\0\1\123\1\124\1\125\1\126\5\0"+
    "\1\127\3\0\1\130\1\131\1\132\14\0\1\133\2\0"+
    "\1\134\10\0\1\135\2\0\1\136\10\0\1\137\11\0"+
    "\1\140\3\0\1\141\1\0\1\142\26\0\1\143\5\0"+
    "\1\144\3\0\1\145\1\146\2\0\1\147\1\150\1\0"+
    "\1\151\4\0\1\152\1\153\1\154\1\155\1\156\4\0"+
    "\1\157\1\0\1\160\1\161\1\0\1\162\1\163\3\0"+
    "\1\164\3\0\1\165\5\0\1\166\1\167\1\170\4\0"+
    "\1\171\1\172\6\0\1\173\1\174\21\0\1\175\1\0"+
    "\1\176\1\0\1\177\1\200\2\0\1\201\1\202\1\203"+
    "\4\0\1\204\5\0\1\205\1\206\3\0\1\207\1\210"+
    "\2\0\1\211\1\212\1\213\1\214\2\0\1\215\2\0"+
    "\1\216\1\0\1\217\21\0\1\220\2\0\1\221\1\0"+
    "\1\222\2\0\1\223\1\224\1\0\1\225\1\0\1\226"+
    "\5\0\1\227\1\230\1\0\1\231\7\0\1\232\11\0"+
    "\1\233\1\234\1\235\1\236\1\0\1\237\1\0\1\240"+
    "\1\241\4\0\1\242\1\0\1\243\1\0\1\244\1\0"+
    "\1\245\1\246\1\0\1\247\5\0\1\250\4\0\1\251"+
    "\1\252\1\253\1\0\1\254\1\255\11\0\1\256\5\0"+
    "\1\257\1\0\1\260\11\0\1\261\3\0\1\262\1\263"+
    "\1\0\1\264\4\0\1\265\7\0\1\266\5\0\1\267"+
    "\4\0\1\270\1\0\1\271";

  private static int [] zzUnpackAction() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\106\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\106\0\u0230\0\u0276\0\106\0\u02bc\0\u0302\0\106"+
    "\0\u0348\0\106\0\106\0\u038e\0\106\0\u03d4\0\u041a\0\u0460"+
    "\0\u04a6\0\106\0\106\0\106\0\106\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\u0b36"+
    "\0\106\0\u0b7c\0\106\0\106\0\106\0\u0bc2\0\u0c08\0\106"+
    "\0\106\0\106\0\u0c4e\0\u0c94\0\106\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\106\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\106\0\106"+
    "\0\u208a\0\106\0\106\0\106\0\106\0\u20d0\0\106\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\106\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\106\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\106"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\106\0\u2e36\0\106\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598"+
    "\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\106\0\u3b10\0\106\0\106\0\106"+
    "\0\106\0\106\0\u3b56\0\u3b9c\0\106\0\106\0\u3be2\0\u3c28"+
    "\0\u3c6e\0\106\0\106\0\106\0\106\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\106\0\u3e12\0\u3e58\0\u3e9e\0\106\0\106"+
    "\0\106\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\106\0\u422c\0\u4272"+
    "\0\106\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c"+
    "\0\u44a2\0\106\0\u44e8\0\u452e\0\106\0\u4574\0\u45ba\0\u4600"+
    "\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\106\0\u47a4\0\u47ea"+
    "\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\106"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\106\0\u4aec\0\106\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8"+
    "\0\u501e\0\u5064\0\u50aa\0\u50f0\0\106\0\u5136\0\u517c\0\u51c2"+
    "\0\u5208\0\u524e\0\106\0\u5294\0\u52da\0\u5320\0\106\0\106"+
    "\0\u5366\0\u53ac\0\106\0\106\0\u53f2\0\106\0\u5438\0\u547e"+
    "\0\u54c4\0\u550a\0\106\0\106\0\106\0\106\0\106\0\u5550"+
    "\0\u5596\0\u55dc\0\u5622\0\106\0\u5668\0\106\0\u56ae\0\u56f4"+
    "\0\106\0\106\0\u573a\0\u5780\0\u57c6\0\106\0\u580c\0\u5852"+
    "\0\u5898\0\106\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\106"+
    "\0\106\0\106\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\106\0\106"+
    "\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\106\0\106"+
    "\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2"+
    "\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u6112"+
    "\0\u6158\0\106\0\u619e\0\106\0\u61e4\0\106\0\106\0\u622a"+
    "\0\u6270\0\106\0\106\0\106\0\u62b6\0\u62fc\0\u6342\0\u6388"+
    "\0\106\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\106\0\106"+
    "\0\u652c\0\u6572\0\u65b8\0\106\0\106\0\u65fe\0\u6644\0\106"+
    "\0\106\0\106\0\106\0\u668a\0\u66d0\0\106\0\u6716\0\u675c"+
    "\0\106\0\u67a2\0\106\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900"+
    "\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\106\0\u6c8e\0\u6cd4\0\106"+
    "\0\u6d1a\0\106\0\u6d60\0\u6da6\0\106\0\u6dec\0\u6e32\0\106"+
    "\0\u6e78\0\106\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\106"+
    "\0\106\0\u701c\0\106\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a"+
    "\0\u71c0\0\u7206\0\106\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364"+
    "\0\u73aa\0\u73f0\0\u7436\0\u747c\0\106\0\106\0\106\0\106"+
    "\0\u74c2\0\106\0\u7508\0\106\0\106\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\106\0\u7666\0\106\0\u76ac\0\106\0\u76f2\0\106"+
    "\0\106\0\u7738\0\106\0\u777e\0\u77c4\0\u780a\0\u7850\0\u7896"+
    "\0\106\0\u78dc\0\u7922\0\u7968\0\u79ae\0\106\0\106\0\106"+
    "\0\u79f4\0\106\0\106\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52"+
    "\0\u7b98\0\u7bde\0\u7c24\0\u7c6a\0\106\0\u7cb0\0\u7cf6\0\u7d3c"+
    "\0\u7d82\0\u7dc8\0\106\0\u7e0e\0\106\0\u7e54\0\u7e9a\0\u7ee0"+
    "\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\106\0\u80ca"+
    "\0\u8110\0\u8156\0\106\0\106\0\u819c\0\106\0\u81e2\0\u8228"+
    "\0\u826e\0\u82b4\0\106\0\u82fa\0\u8340\0\u8386\0\u83cc\0\u8412"+
    "\0\u8458\0\u849e\0\106\0\u84e4\0\u852a\0\u8570\0\u85b6\0\u85fc"+
    "\0\106\0\u8642\0\u8688\0\u86ce\0\u8714\0\106\0\u875a\0\106";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\2"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\2\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\2\1\60\1\2\1\61\3\2\1\62\1\63\13\2"+
    "\1\64\1\2\107\0\1\3\5\0\1\3\100\0\1\65"+
    "\12\0\1\66\72\0\1\67\1\0\1\70\103\0\1\71"+
    "\2\0\1\72\102\0\1\73\104\0\1\3\1\74\4\0"+
    "\1\3\100\0\1\75\6\0\1\76\76\0\1\77\117\0"+
    "\1\100\73\0\1\101\12\0\1\102\72\0\1\103\14\0"+
    "\1\104\70\0\1\105\12\0\1\106\4\0\1\107\65\0"+
    "\1\110\105\0\1\111\105\0\1\112\12\0\1\113\4\0"+
    "\1\114\65\0\1\115\24\0\1\116\113\0\1\117\1\0"+
    "\1\120\11\0\1\121\100\0\1\122\10\0\1\123\65\0"+
    "\1\124\11\0\1\125\75\0\1\126\1\0\1\127\6\0"+
    "\1\130\1\131\72\0\1\132\6\0\1\133\12\0\1\134"+
    "\62\0\1\135\1\136\2\0\1\137\1\0\1\140\2\0"+
    "\1\141\1\142\1\143\1\144\71\0\1\145\3\0\1\146"+
    "\1\147\77\0\1\150\1\0\1\151\3\0\1\152\2\0"+
    "\1\153\4\0\1\154\1\0\1\155\66\0\1\156\3\0"+
    "\1\157\2\0\1\160\76\0\1\161\1\162\5\0\1\163"+
    "\2\0\1\164\2\0\1\165\67\0\1\166\1\0\1\167"+
    "\5\0\1\170\7\0\1\171\72\0\1\172\107\0\1\173"+
    "\1\0\1\174\1\175\2\0\1\176\2\0\1\177\4\0"+
    "\1\200\61\0\1\201\107\0\1\202\1\203\1\0\1\204"+
    "\1\0\1\205\3\0\1\206\5\0\1\207\64\0\1\210"+
    "\3\0\1\211\106\0\1\212\5\0\1\213\1\0\1\214"+
    "\77\0\1\215\2\0\1\216\1\0\1\217\71\0\1\220"+
    "\11\0\1\221\2\0\1\222\116\0\1\223\63\0\1\224"+
    "\135\0\1\225\64\0\1\226\51\0\1\227\73\0\1\230"+
    "\12\0\1\231\72\0\1\232\105\0\1\233\105\0\1\234"+
    "\105\0\1\235\12\0\1\236\72\0\1\237\140\0\1\240"+
    "\5\0\1\241\102\0\1\242\106\0\1\243\104\0\1\244"+
    "\106\0\1\245\111\0\1\246\124\0\1\247\100\0\1\250"+
    "\107\0\1\251\75\0\1\252\1\253\72\0\1\254\4\0"+
    "\1\255\115\0\1\256\75\0\1\257\101\0\1\260\16\0"+
    "\1\261\73\0\1\262\107\0\1\263\103\0\1\264\75\0"+
    "\1\265\106\0\1\266\107\0\1\267\13\0\1\270\100\0"+
    "\1\271\77\0\1\272\110\0\1\273\75\0\1\274\1\0"+
    "\1\275\7\0\1\276\10\0\1\277\76\0\1\300\74\0"+
    "\1\301\103\0\1\302\111\0\1\303\116\0\1\304\100\0"+
    "\1\305\110\0\1\306\75\0\1\307\123\0\1\310\65\0"+
    "\1\311\120\0\1\312\71\0\1\313\115\0\1\314\76\0"+
    "\1\315\114\0\1\316\114\0\1\317\103\0\1\320\73\0"+
    "\1\321\121\0\1\322\4\0\1\323\64\0\1\324\5\0"+
    "\1\325\1\326\73\0\1\327\105\0\1\330\2\0\1\331"+
    "\14\0\1\332\66\0\1\333\110\0\1\334\123\0\1\335"+
    "\1\0\1\336\64\0\1\337\112\0\1\340\107\0\1\341"+
    "\1\0\1\342\71\0\1\343\127\0\1\344\63\0\1\345"+
    "\11\0\1\346\110\0\1\347\71\0\1\350\13\0\1\351"+
    "\104\0\1\352\104\0\1\353\107\0\1\354\73\0\1\355"+
    "\101\0\1\356\14\0\1\357\76\0\1\360\100\0\1\361"+
    "\11\0\1\362\2\0\1\363\76\0\1\364\104\0\1\365"+
    "\123\0\1\366\65\0\1\367\12\0\1\370\1\0\1\371"+
    "\1\0\1\372\5\0\1\373\1\0\1\374\1\375\1\0"+
    "\1\376\1\0\1\377\1\0\1\u0100\1\u0101\2\0\1\u0102"+
    "\64\0\1\u0103\116\0\1\u0104\62\0\1\u0105\40\0\1\u0106"+
    "\105\0\1\u0107\141\0\1\u0108\106\0\1\u0109\107\0\1\u010a"+
    "\113\0\1\u010b\107\0\1\u010c\107\0\1\u010d\71\0\1\u010e"+
    "\107\0\1\u010f\123\0\1\u0110\63\0\1\u0111\124\0\1\u0112"+
    "\72\0\1\u0113\105\0\1\u0114\125\0\1\u0115\65\0\1\u0116"+
    "\101\0\1\u0117\110\0\1\u0118\13\0\1\u0119\105\0\1\u011a"+
    "\71\0\1\u011b\111\0\1\u011c\76\0\1\u011d\112\0\1\u011e"+
    "\103\0\1\u011f\1\u0120\115\0\1\u0121\103\0\1\u0122\72\0"+
    "\1\u0123\115\0\1\u0124\102\0\1\u0125\113\0\1\u0126\107\0"+
    "\1\u0127\103\0\1\u0128\76\0\1\u0129\112\0\1\u012a\105\0"+
    "\1\u012b\75\0\1\u012c\2\0\1\u012d\105\0\1\u012e\102\0"+
    "\1\u012f\120\0\1\u0130\73\0\1\u0131\110\0\1\u0132\113\0"+
    "\1\u0133\100\0\1\u0134\117\0\1\u0135\100\0\1\u0136\76\0"+
    "\1\u0137\114\0\1\u0138\3\0\1\u0139\67\0\1\u013a\111\0"+
    "\1\u013b\110\0\1\u013c\77\0\1\u013d\113\0\1\u013e\105\0"+
    "\1\u013f\102\0\1\u0140\113\0\1\u0141\73\0\1\u0142\117\0"+
    "\1\u0143\73\0\1\u0144\114\0\1\u0145\76\0\1\u0146\112\0"+
    "\1\u0147\103\0\1\u0148\111\0\1\u0149\120\0\1\u014a\67\0"+
    "\1\u014b\115\0\1\u014c\105\0\1\u014d\74\0\1\u014e\114\0"+
    "\1\u014f\101\0\1\u0150\116\0\1\u0151\100\0\1\u0152\74\0"+
    "\1\u0153\117\0\1\u0154\73\0\1\u0155\110\0\1\u0156\126\0"+
    "\1\u0157\63\0\1\u0158\120\0\1\u0159\107\0\1\u015a\74\0"+
    "\1\u015b\112\0\1\u015c\106\0\1\u015d\104\0\1\u015e\110\0"+
    "\1\u015f\72\0\1\u0160\113\0\1\u0161\124\0\1\u0162\112\0"+
    "\1\u0163\103\0\1\u0164\107\0\1\u0165\7\0\1\u0166\73\0"+
    "\1\u0167\115\0\1\u0168\74\0\1\u0169\110\0\1\u016a\71\0"+
    "\1\u016b\77\0\1\u016c\116\0\1\u016d\74\0\1\u016e\71\0"+
    "\1\u016f\5\0\1\u0170\6\0\1\u0171\71\0\1\u0172\125\0"+
    "\1\u0173\100\0\1\u0174\105\0\1\u0175\106\0\1\u0176\73\0"+
    "\1\u0177\121\0\1\u0178\65\0\1\u0179\120\0\1\u017a\106\0"+
    "\1\u017b\73\0\1\u017c\105\0\1\u017d\122\0\1\u017e\72\0"+
    "\1\u017f\12\0\1\u0180\76\0\1\u0181\102\0\1\u0182\115\0"+
    "\1\u0183\75\0\1\u0184\117\0\1\u0185\72\0\1\u0186\112\0"+
    "\1\u0187\100\0\1\u0188\116\0\1\u0189\105\0\1\u018a\103\0"+
    "\1\u018b\76\0\1\u018c\105\0\1\u018d\106\0\1\u018e\102\0"+
    "\1\u018f\120\0\1\u0190\110\0\1\u0191\76\0\1\u0192\111\0"+
    "\1\u0193\105\0\1\u0194\70\0\1\u0195\111\0\1\u0196\116\0"+
    "\1\u0197\105\0\1\u0198\103\0\1\u0199\74\0\1\u019a\120\0"+
    "\1\u019b\74\0\1\u019c\115\0\1\u019d\107\0\1\u019e\75\0"+
    "\1\u019f\104\0\1\u01a0\115\0\1\u01a1\74\0\1\u01a2\106\0"+
    "\1\u01a3\106\0\1\u01a4\103\0\1\u01a5\117\0\1\u01a6\104\0"+
    "\1\u01a7\75\0\1\u01a8\116\0\1\u01a9\102\0\1\u01aa\77\0"+
    "\1\u01ab\125\0\1\u01ac\73\0\1\u01ad\74\0\1\u01ae\104\0"+
    "\1\u01af\115\0\1\u01b0\107\0\1\u01b1\106\0\1\u01b2\77\0"+
    "\1\u01b3\114\0\1\u01b4\123\0\1\u01b5\112\0\1\u01b6\103\0"+
    "\1\u01b7\115\0\1\u01b8\103\0\1\u01b9\72\0\1\u01ba\110\0"+
    "\1\u01bb\115\0\1\u01bc\1\u01bd\104\0\1\u01be\43\0\1\u01bf"+
    "\116\0\1\u01c0\110\0\1\u01c1\101\0\1\u01c2\100\0\1\u01c3"+
    "\107\0\1\u01c4\111\0\1\u01c5\103\0\1\u01c6\100\0\1\u01c7"+
    "\112\0\1\u01c8\76\0\1\u01c9\107\0\1\u01ca\106\0\1\u01cb"+
    "\105\0\1\u01cc\113\0\1\u01cd\74\0\1\u01ce\111\0\1\u01cf"+
    "\104\0\1\u01d0\104\0\1\u01d1\102\0\1\u01d2\112\0\1\u01d3"+
    "\115\0\1\u01d4\71\0\1\u01d5\116\0\1\u01d6\76\0\1\u01d7"+
    "\112\0\1\u01d8\76\0\1\u01d9\115\0\1\u01da\111\0\1\u01db"+
    "\73\0\1\u01dc\105\0\1\u01dd\114\0\1\u01de\107\0\1\u01df"+
    "\76\0\1\u01e0\103\0\1\u01e1\110\0\1\u01e2\112\0\1\u01e3"+
    "\107\0\1\u01e4\70\0\1\u01e5\112\0\1\u01e6\116\0\1\u01e7"+
    "\74\0\1\u01e8\112\0\1\u01e9\76\0\1\u01ea\106\0\1\u01eb"+
    "\116\0\1\u01ec\102\0\1\u01ed\76\0\1\u01ee\114\0\1\u01ef"+
    "\126\0\1\u01f0\105\0\1\u01f1\100\0\1\u01f2\112\0\1\u01f3"+
    "\121\0\1\u01f4\104\0\1\u01f5\71\0\1\u01f6\103\0\1\u01f7"+
    "\115\0\1\u01f8\100\0\1\u01f9\64\0\1\u01fa\100\0\1\u01fb"+
    "\106\0\1\u01fc\110\0\1\u01fd\77\0\1\u01fe\111\0\1\u01ff"+
    "\102\0\1\u0200\104\0\1\u0201\105\0\1\u0202\114\0\1\u0203"+
    "\112\0\1\u0204\107\0\1\u0205\77\0\1\u0206\72\0\1\u0207"+
    "\107\0\1\u0208\110\0\1\u0209\104\0\1\u020a\113\0\1\u020b"+
    "\105\0\1\u020c\72\0\1\u020d\106\0\1\u020e\106\0\1\u020f"+
    "\114\0\1\u0210\101\0\1\u0211\104\0\1\u0212\106\0\1\u0213"+
    "\104\0\1\u0214\116\0\1\u0215\71\0\1\u0216\131\0\1\u0217"+
    "\107\0\1\u0218\105\0\1\u0219\11\0\1\u021a\73\0\1\u021b"+
    "\105\0\1\u021c\111\0\1\u021d\120\0\1\u021e\72\0\1\u021f"+
    "\107\0\1\u0220\107\0\1\u0221\75\0\1\u0222\62\0\1\u0223"+
    "\105\0\1\u0224\106\0\1\u0225\105\0\1\u0226\105\0\1\u0227"+
    "\105\0\1\u0228\104\0\1\u0229\105\0\1\u022a\130\0\1\u022b"+
    "\67\0\1\u022c\100\0\1\u022d\107\0\1\u022e\110\0\1\u022f"+
    "\76\0\1\u0230\114\0\1\u0231\101\0\1\u0232\105\0\1\u0233"+
    "\120\0\1\u0234\72\0\1\u0235\115\0\1\u0236\75\0\1\u0237"+
    "\127\0\1\u0238\105\0\1\u0239\111\0\1\u023a\101\0\1\u023b"+
    "\115\0\1\u023c\102\0\1\u023d\122\0\1\u023e\101\0\1\u023f"+
    "\75\0\1\u0240\77\0\1\u0241\63\0\1\u0242\105\0\1\u0243"+
    "\105\0\1\u0244\115\0\1\u0245\75\0\1\u0246\104\0\1\u0247"+
    "\106\0\1\u0248\116\0\1\u0249\76\0\1\u024a\105\0\1\u024b"+
    "\102\0\1\u024c\133\0\1\u024d\110\0\1\u024e\77\0\1\u024f"+
    "\105\0\1\u0250\105\0\1\u0251\122\0\1\u0252\73\0\1\u0253"+
    "\70\0\1\u0254\77\0\1\u0255\103\0\1\u0256\130\0\1\u0257"+
    "\62\0\1\u0258\140\0\1\u0259\111\0\1\u025a\70\0\1\u025b"+
    "\114\0\1\u025c\76\0\1\u025d\105\0\1\u025e\73\0\1\u025f"+
    "\136\0\1\u0260\60\0\1\u0261\71\0\1\u0262\115\0\1\u0263"+
    "\132\0\1\u0264\72\0\1\u0265\125\0\1\u0266\65\0\1\u0267"+
    "\75\0\1\u0268\104\0\1\u0269\74\0\1\u026a\107\0\1\u026b"+
    "\116\0\1\u026c\114\0\1\u026d\105\0\1\u026e\122\0\1\u026f"+
    "\51\0\1\u0270\101\0\1\u0271\116\0\1\u0272\117\0\1\u0273"+
    "\126\0\1\u0274\62\0\1\u0275\65\0\1\u0276\120\0\1\u0277"+
    "\120\0\1\u0278\57\0\1\u0279\115\0\1\u027a\75\0\1\u027b"+
    "\137\0\1\u027c\57\0\1\u027d\107\0\1\u027e\127\0\1\u027f"+
    "\54\0\1\u0280\103\0\1\u0281\147\0\1\u0282\107\0\1\u0283"+
    "\66\0\1\u0284\74\0\1\u0285\116\0\1\u0286\76\0\1\u0287"+
    "\71\0\1\u0288\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\4\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\2\11\1\1\1\11\4\1\4\11"+
    "\27\1\13\11\1\1\1\11\1\1\3\11\2\1\3\11"+
    "\2\1\1\11\1\1\26\0\1\1\26\0\2\1\1\0"+
    "\1\11\27\0\2\11\1\1\4\11\1\1\1\11\4\0"+
    "\1\11\7\0\1\11\33\0\1\11\1\0\1\1\10\0"+
    "\1\11\1\0\1\11\3\0\1\1\52\0\1\11\1\0"+
    "\5\11\2\0\2\11\3\0\4\11\5\0\1\11\3\0"+
    "\3\11\14\0\1\11\2\0\1\11\10\0\1\11\2\0"+
    "\1\11\10\0\1\11\11\0\1\11\3\0\1\11\1\0"+
    "\1\11\26\0\1\11\5\0\1\11\3\0\2\11\2\0"+
    "\2\11\1\0\1\11\4\0\5\11\4\0\1\11\1\0"+
    "\1\11\1\1\1\0\2\11\3\0\1\11\3\0\1\11"+
    "\5\0\3\11\4\0\2\11\6\0\2\11\21\0\1\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\4\0\1\11"+
    "\5\0\2\11\3\0\2\11\2\0\4\11\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\21\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\0\1\11\7\0\1\11\11\0"+
    "\4\11\1\0\1\11\1\0\2\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\0\1\11\5\0"+
    "\1\11\4\0\3\11\1\0\2\11\11\0\1\11\5\0"+
    "\1\11\1\0\1\11\11\0\1\11\3\0\2\11\1\0"+
    "\1\11\4\0\1\11\7\0\1\11\5\0\1\11\4\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public DLanguageLexer() {
    this((java.io.Reader)null);
  }


  public DLanguageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DLanguageLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 72: 
          { return ASM;
          }
        case 186: break;
        case 118: 
          { return SCOPE;
          }
        case 187: break;
        case 6: 
          { return BITAND;
          }
        case 188: break;
        case 11: 
          { return DIV;
          }
        case 189: break;
        case 114: 
          { return ALIAS;
          }
        case 190: break;
        case 125: 
          { return TYPEOF;
          }
        case 191: break;
        case 77: 
          { return UNORDERED;
          }
        case 192: break;
        case 8: 
          { return TILDE;
          }
        case 193: break;
        case 112: 
          { return FALSE;
          }
        case 194: break;
        case 172: 
          { return PROTECTED;
          }
        case 195: break;
        case 147: 
          { return NOTHROW;
          }
        case 196: break;
        case 105: 
          { return DEBUG;
          }
        case 197: break;
        case 167: 
          { return SPECIALFILE;
          }
        case 198: break;
        case 42: 
          { return SHIFTRIGHT;
          }
        case 199: break;
        case 17: 
          { return LBRACE;
          }
        case 200: break;
        case 134: 
          { return RETURN;
          }
        case 201: break;
        case 153: 
          { return PRIVATE;
          }
        case 202: break;
        case 117: 
          { return IREAL;
          }
        case 203: break;
        case 146: 
          { return DEFAULT;
          }
        case 204: break;
        case 121: 
          { return WCHAR;
          }
        case 205: break;
        case 49: 
          { return MULEQUAL;
          }
        case 206: break;
        case 66: 
          { return NOTLESSEQUALGREATER;
          }
        case 207: break;
        case 164: 
          { return TVECTOR;
          }
        case 208: break;
        case 13: 
          { return DOT;
          }
        case 209: break;
        case 38: 
          { return DECREMENT;
          }
        case 210: break;
        case 70: 
          { return NEW;
          }
        case 211: break;
        case 56: 
          { return IN;
          }
        case 212: break;
        case 109: 
          { return UCENT;
          }
        case 213: break;
        case 149: 
          { return TFINALLY;
          }
        case 214: break;
        case 98: 
          { return PURE;
          }
        case 215: break;
        case 185: 
          { return TEMPLATEARGUMENTLIST;
          }
        case 216: break;
        case 60: 
          { return SHIFTRIGHTEQUAL;
          }
        case 217: break;
        case 19: 
          { return LESS;
          }
        case 218: break;
        case 87: 
          { return CENT;
          }
        case 219: break;
        case 64: 
          { return NOTGREATEREQUAL;
          }
        case 220: break;
        case 106: 
          { return DCHAR;
          }
        case 221: break;
        case 169: 
          { return INTERFACE;
          }
        case 222: break;
        case 62: 
          { return LESSEQUALGREATER;
          }
        case 223: break;
        case 92: 
          { return NULL;
          }
        case 224: break;
        case 94: 
          { return REAL;
          }
        case 225: break;
        case 126: 
          { return TYPEID;
          }
        case 226: break;
        case 27: 
          { return RPAREN;
          }
        case 227: break;
        case 132: 
          { return USHORT;
          }
        case 228: break;
        case 1: 
          { return SEMICOLON;
          }
        case 229: break;
        case 82: 
          { return LAZY;
          }
        case 230: break;
        case 61: 
          { return UNSIGNEDSHIFTRIGHT;
          }
        case 231: break;
        case 23: 
          { return NOT;
          }
        case 232: break;
        case 45: 
          { return LESSEQUAL;
          }
        case 233: break;
        case 181: 
          { return SPECIALIMESTAMP;
          }
        case 234: break;
        case 79: 
          { return BODY;
          }
        case 235: break;
        case 46: 
          { return LESSORGREATER;
          }
        case 236: break;
        case 97: 
          { return WITH;
          }
        case 237: break;
        case 15: 
          { return HASH;
          }
        case 238: break;
        case 168: 
          { return SPECIALLINE;
          }
        case 239: break;
        case 156: 
          { return TEMPLATE;
          }
        case 240: break;
        case 180: 
          { return SPECIALFUNCTION;
          }
        case 241: break;
        case 39: 
          { return DIVEQUAL;
          }
        case 242: break;
        case 4: 
          { return ASSIGN;
          }
        case 243: break;
        case 120: 
          { return SHORT;
          }
        case 244: break;
        case 143: 
          { return TMODULE;
          }
        case 245: break;
        case 99: 
          { return BREAK;
          }
        case 246: break;
        case 122: 
          { return WHILE;
          }
        case 247: break;
        case 115: 
          { return ALIGN;
          }
        case 248: break;
        case 21: 
          { return MOD;
          }
        case 249: break;
        case 182: 
          { return FOREACH_REVERSE;
          }
        case 250: break;
        case 184: 
          { return SPECIALPRETTYFUNCTION;
          }
        case 251: break;
        case 150: 
          { return IDOUBLE;
          }
        case 252: break;
        case 130: 
          { return DOUBLE;
          }
        case 253: break;
        case 52: 
          { return NOTLESS;
          }
        case 254: break;
        case 73: 
          { return REF;
          }
        case 255: break;
        case 133: 
          { return ASSERT;
          }
        case 256: break;
        case 142: 
          { return PRAGMA;
          }
        case 257: break;
        case 65: 
          { return NOTLESSEQUAL;
          }
        case 258: break;
        case 20: 
          { return LPAREN;
          }
        case 259: break;
        case 50: 
          { return NOTEQUAL;
          }
        case 260: break;
        case 173: 
          { return GSHARED;
          }
        case 261: break;
        case 63: 
          { return SHIFTLEFTEQUAL;
          }
        case 262: break;
        case 68: 
          { return OUT;
          }
        case 263: break;
        case 7: 
          { return BITOR;
          }
        case 264: break;
        case 179: 
          { return TPARAMETERS;
          }
        case 265: break;
        case 75: 
          { return EOF;
          }
        case 266: break;
        case 54: 
          { return POW;
          }
        case 267: break;
        case 48: 
          { return MODEQUAL;
          }
        case 268: break;
        case 174: 
          { return TDEPRECATED;
          }
        case 269: break;
        case 160: 
          { return FUNCTION;
          }
        case 270: break;
        case 37: 
          { return MINUSEQUAL;
          }
        case 271: break;
        case 101: 
          { return CONST;
          }
        case 272: break;
        case 111: 
          { return FLOAT;
          }
        case 273: break;
        case 104: 
          { return CREAL;
          }
        case 274: break;
        case 124: 
          { return MIXIN;
          }
        case 275: break;
        case 28: 
          { return TERNARY;
          }
        case 276: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 277: break;
        case 16: 
          { return PLUS;
          }
        case 278: break;
        case 100: 
          { return THROW;
          }
        case 279: break;
        case 116: 
          { return INOUT;
          }
        case 280: break;
        case 44: 
          { return INCREMENT;
          }
        case 281: break;
        case 93: 
          { return AUTO;
          }
        case 282: break;
        case 76: 
          { return UNSIGNEDSHIFTRIGHTEQUAL;
          }
        case 283: break;
        case 95: 
          { return GOTO;
          }
        case 284: break;
        case 86: 
          { return ENUM;
          }
        case 285: break;
        case 137: 
          { return STATIC;
          }
        case 286: break;
        case 178: 
          { return SYNCHRONIZED;
          }
        case 287: break;
        case 145: 
          { return CDOUBLE;
          }
        case 288: break;
        case 128: 
          { return EXPORT;
          }
        case 289: break;
        case 166: 
          { return SPECIALTIME;
          }
        case 290: break;
        case 123: 
          { return MACRO;
          }
        case 291: break;
        case 55: 
          { return DO;
          }
        case 292: break;
        case 43: 
          { return PLUSEQUAL;
          }
        case 293: break;
        case 90: 
          { return CHAR;
          }
        case 294: break;
        case 36: 
          { return COLON;
          }
        case 295: break;
        case 24: 
          { return XOR;
          }
        case 296: break;
        case 35: 
          { return CATEQUAL;
          }
        case 297: break;
        case 12: 
          { return DOLLAR;
          }
        case 298: break;
        case 152: 
          { return PACKAGE;
          }
        case 299: break;
        case 102: 
          { return CLASS;
          }
        case 300: break;
        case 30: 
          { return GOESTO;
          }
        case 301: break;
        case 148: 
          { return FOREACH;
          }
        case 302: break;
        case 69: 
          { return TRY;
          }
        case 303: break;
        case 83: 
          { return THIS;
          }
        case 304: break;
        case 183: 
          { return CHARACTERLITERAL;
          }
        case 305: break;
        case 138: 
          { return STRUCT;
          }
        case 306: break;
        case 155: 
          { return OVERRIDE;
          }
        case 307: break;
        case 135: 
          { return IFLOAT;
          }
        case 308: break;
        case 162: 
          { return VOLATILE;
          }
        case 309: break;
        case 119: 
          { return SUPER;
          }
        case 310: break;
        case 22: 
          { return STAR;
          }
        case 311: break;
        case 163: 
          { return TRAITS;
          }
        case 312: break;
        case 53: 
          { return XOREQUAL;
          }
        case 313: break;
        case 31: 
          { return BITANDEQUAL;
          }
        case 314: break;
        case 136: 
          { return IMPORT;
          }
        case 315: break;
        case 51: 
          { return NOTGREATER;
          }
        case 316: break;
        case 74: 
          { return INT;
          }
        case 317: break;
        case 158: 
          { return DELEGATE;
          }
        case 318: break;
        case 71: 
          { return FOR;
          }
        case 319: break;
        case 5: 
          { return AT;
          }
        case 320: break;
        case 58: 
          { return IS;
          }
        case 321: break;
        case 170: 
          { return TINVARIANT;
          }
        case 322: break;
        case 175: 
          { return SPECIALMODULE;
          }
        case 323: break;
        case 159: 
          { return TUNITTEST;
          }
        case 324: break;
        case 140: 
          { return SWITCH;
          }
        case 325: break;
        case 103: 
          { return TCATCH;
          }
        case 326: break;
        case 32: 
          { return LOGICAND;
          }
        case 327: break;
        case 88: 
          { return CAST;
          }
        case 328: break;
        case 78: 
          { return BOOL;
          }
        case 329: break;
        case 129: 
          { return CFLOAT;
          }
        case 330: break;
        case 127: 
          { return EXTERN;
          }
        case 331: break;
        case 40: 
          { return SLICE;
          }
        case 332: break;
        case 57: 
          { return IF;
          }
        case 333: break;
        case 59: 
          { return VARARG;
          }
        case 334: break;
        case 165: 
          { return SPECIALDATE;
          }
        case 335: break;
        case 85: 
          { return ELSE;
          }
        case 336: break;
        case 113: 
          { return FINAL;
          }
        case 337: break;
        case 29: 
          { return EQUAL;
          }
        case 338: break;
        case 47: 
          { return SHIFTLEFT;
          }
        case 339: break;
        case 33: 
          { return BITOREQUAL;
          }
        case 340: break;
        case 96: 
          { return VOID;
          }
        case 341: break;
        case 154: 
          { return SPECIALEOF;
          }
        case 342: break;
        case 108: 
          { return ULONG;
          }
        case 343: break;
        case 84: 
          { return TRUE;
          }
        case 344: break;
        case 151: 
          { return VERSION;
          }
        case 345: break;
        case 144: 
          { return TYPEDEF;
          }
        case 346: break;
        case 10: 
          { return MINUS;
          }
        case 347: break;
        case 81: 
          { return LONG;
          }
        case 348: break;
        case 141: 
          { return PUBLIC;
          }
        case 349: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 350: break;
        case 25: 
          { return RBRACE;
          }
        case 351: break;
        case 161: 
          { return ABSTRACT;
          }
        case 352: break;
        case 110: 
          { return UNION;
          }
        case 353: break;
        case 9: 
          { return COMMA;
          }
        case 354: break;
        case 131: 
          { return DELETE;
          }
        case 355: break;
        case 177: 
          { return SPECIALVERSION;
          }
        case 356: break;
        case 107: 
          { return UBYTE;
          }
        case 357: break;
        case 176: 
          { return SPECIALVENDOR;
          }
        case 358: break;
        case 14: 
          { return GREATER;
          }
        case 359: break;
        case 26: 
          { return RBRACKET;
          }
        case 360: break;
        case 171: 
          { return IMMUTABLE;
          }
        case 361: break;
        case 41: 
          { return GREATEREQUAL;
          }
        case 362: break;
        case 157: 
          { return CONTINUE;
          }
        case 363: break;
        case 80: 
          { return BYTE;
          }
        case 364: break;
        case 67: 
          { return POWEQUAL;
          }
        case 365: break;
        case 91: 
          { return UINT;
          }
        case 366: break;
        case 34: 
          { return LOGICOR;
          }
        case 367: break;
        case 89: 
          { return CASE;
          }
        case 368: break;
        case 18: 
          { return LBRACKET;
          }
        case 369: break;
        case 139: 
          { return SHARED;
          }
        case 370: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
