
{

tokens = [
  Assign = "="
  At =  "@"
  BitAnd =  "&"
  BitAndEqual =  "&="
  BitOr =  "|"
  BitOrEqual =  "|="
  CatEqual =  "~="
  Colon =  ":"
  Comma =  ","
  Decrement =  "--"
  Div =  "/"
  DivEqual =  "/="
  Dollar =  "$"
  Dot =  "."
  Equal =  "=="
  GoesTo =  "=>"
  Greater =  ">"
  GreaterEqual =  ">="
  Hash =  "#"
  Increment =  "++"
  LBrace =  "{"
  LBracket =  "["
  Less =  "<"
  LessEqual =  "<="
  LessEqualGreater =  "<>="
  LessOrGreater =  "<>"
  LogicAnd =  "&&"
  LogicOr =  "||"
  LParen =  "("
  Minus =  "-"
  MinusEqual =  "-="
  Mod =  "%"
  ModEqual =  "%="
  MulEqual =  "*="
  Not =  "!"
  NotEqual =  "!="
  NotGreater =  "!>"
  NotGreaterEqual =  "!>="
  NotLess =  "!<"
  NotLessEqual =  "!<="
  NotLessEqualGreater =  "!<>"
  Plus =  "+"
  PlusEqual =  "+="
  Pow =  "^^"
  PowEqual =  "^^="
  RBrace =  "}"
  RBracket =  "]"
  RParen =  ")"
  Semicolon =  ""
  ShiftLeft =  "<<"
  ShiftLeftEqual =  "<<="
  ShiftRight =  ">>"
  ShiftRightEqual =  ">>="
  Slice =  ".."
  Star =  "*"
  Ternary =  "?"
  Tilde =  "~"
  Unordered =  "!<>="
  UnsignedShiftRight =  ">>>"
  UnsignedShiftRightEqual =  ">>>="
  Vararg =  "..."
  Xor =  "^"
  XorEqual =  "^="
  Bool =  "bool"
  Byte =  "byte"
  Cdouble =  "cdouble"
  Cent =  "cent"
  Cfloat =  "cfloat"
  Char =  "char"
  Creal =  "creal"
  Dchar =  "dchar"
  Double =  "double"
  Float =  "float"
  Function =  "function"
  Idouble =  "idouble"
  Ifloat =  "ifloat"
  Int =  "int"
  Ireal =  "ireal"
  Long =  "long"
  Real =  "real"
  Short =  "short"
  Ubyte =  "ubyte"
  Ucent =  "ucent"
  Uint =  "uint"
  Ulong =  "ulong"
  Ushort =  "ushort"
  Void =  "void"
  Wchar =  "wchar"
  Align =  "align"
  TDeprecated =  "deprecated"
  Extern =  "extern"
  Pragma =  "pragma"
  Export =  "export"
  Package =  "package"
  Private =  "private"
  Protected =  "protected"
  Public =  "public"
  Abstract =  "abstract"
  Auto =  "auto"
  Const =  "const"
  Final =  "final"
  Gshared =  "__gshared"
  Immutable =  "immutable"
  Inout =  "inout"
  Scope =  "scope"
  Shared =  "shared"
  Static =  "static"
  Synchronized =  "synchronized"
  Alias =  "alias"
  Asm =  "asm"
  Assert =  "assert"
  Body =  "body"
  Break =  "break"
  Case =  "case"
  Cast =  "cast"
  TCatch =  "catch"
  Class =  "class"
  Continue =  "continue"
  Debug =  "debug"
  Default =  "default"
  Delegate =  "delegate"
  Delete =  "delete"
  Do =  "do"
  Else =  "else"
  Enum =  "enum"
  False =  "false"
  TFinally =  "finally"
  Foreach =  "foreach"
  Foreach_reverse =  "foreach_reverse"
  For =  "for"
  Goto =  "goto"
  If =  "if"
  Import =  "import"
  In =  "in"
  Interface =  "interface"
  TInvariant =  "invariant"
  Is =  "is"
  Lazy =  "lazy"
  Macro =  "macro"
  Mixin =  "mixin"
  TModule =  "module"
  New =  "new"
  Nothrow =  "nothrow"
  Null =  "null"
  Out =  "out"
  Override =  "override"
  Pure =  "pure"
  Ref =  "ref"
  Return =  "return"
  Struct =  "struct"
  Super =  "super"
  Switch =  "switch"
  Template =  "template"
  This =  "this"
  Throw =  "throw"
  True =  "true"
  Try =  "try"
  Typedef =  "typedef"
  Typeid =  "typeid"
  Typeof =  "typeof"
  Union =  "union"
  TUnittest =  "unittest"
  Version =  "version"
  Volatile =  "volatile"
  While =  "while"
  With =  "with"
  SpecialDate = "__DATE__"
  SpecialEof = "__EOF__"
  SpecialTime = "__TIME__"
  Specialimestamp = "__TIMESTAMP__"
  SpecialVendor = "__VENDOR__"
  SpecialVersion = "__VERSION__"
  SpecialFile = "__FILE__"
  SpecialLine = "__LINE__"
  SpecialModule = "__MODULE__"
  SpecialFunction = "__FUNCTION__"
  SpecialPrettyFunction = "__PRETTY_FUNCTION__"
  Traits = "__traits"
  TParameters = "__parameters"
  TVector = "__vector"

  Identifier = "regexp:\w+"
  space='regexp:\s+'
//  string_literal='regexp:"\w+"'
//  string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
  number="regexp:\d+"
  line_comment="regexp://.*"
  block_comment="regexp:/\*(.|\n)*\*/"
]


}

dFile ::= item_*

private item_ ::= ( moduleDeclaration | declaration )

  StringLiteral ::= 'regexp:"\w*"'

 aliasDeclaration ::=
       'alias' aliasInitializer (',' aliasInitializer)* ';'
     | 'alias' linkageAttribute? type Identifier ';'

 aliasInitializer ::=
     Identifier '=' type

 aliasThisDeclaration ::=
     'alias' Identifier 'this' ';'

// TODO 29
 alignAttribute ::=
//     'align' ('(' IntegerLiteral ')')?
     'align' ('(' Identifier ')')?

 argumentList ::=
     assignExpression (',' assignExpression?)*

 arguments ::=
     '(' argumentList? ')'

 arrayInitializer ::=
       '[' ']'
     | '[' arrayMemberInitialization (',' arrayMemberInitialization?)* ']'

 arrayLiteral ::=
     '[' argumentList? ']'

 arrayMemberInitialization ::=
     (assignExpression ':')? nonVoidInitializer

 asmEqualExp ::=
     asmRelExp (('==' | '!=') asmRelExp)?

 asmExp ::=
     asmLogOrExp ('?' asmExp ':' asmExp)?

// TODO 24
 asmInstruction ::=
     Identifier
//     | 'align' IntegerLiteral
     | 'align' Identifier
     | Identifier ':' asmInstruction
     | Identifier asmExp
     | Identifier operands

 asmLogAndExp ::=
     asmOrExp ('&&' asmOrExp)?

 asmLogOrExp ::=
     asmLogAndExp ('||' asmLogAndExp)?

 asmMulExp ::=
     asmBrExp (('*' | '/' | '%') asmBrExp)?

 asmOrExp ::=
     asmXorExp ('|' asmXorExp)?

// TODO 23
 asmPrimaryExp ::=
//       IntegerLiteral
//     | FloatLiteral
      register
     | identifierChain
     | '$'

 asmRelExp ::=
     asmShiftExp (('<' | '<=' | '>' | '>=') asmShiftExp)?


 asmShiftExp ::=
     asmAddExp (('<<' | '>>' | '>>>') asmAddExp)?

 asmStatement ::=
     'asm' '{' asmInstruction+ '}'

 asmTypePrefix ::=
       Identifier Identifier
     | 'byte' Identifier
     | 'short' Identifier
     | 'int' Identifier
     | 'float' Identifier
     | 'double' Identifier
     | 'real' Identifier

 asmUnaExp ::=
       asmTypePrefix asmExp
     | Identifier asmExp
     | '+' asmUnaExp
     | '-' asmUnaExp
     | '!' asmUnaExp
     | '~' asmUnaExp
     | asmPrimaryExp

 asmXorExp ::=
     asmAndExp ('^' asmAndExp)?

 assertExpression ::=
     'assert' '(' assignExpression (',' assignExpression)? ')'

 assignExpression ::=
     ternaryExpression (assignOperator assignExpression)?

 assignOperator ::=
       '='
     | '>>>='
     | '>>='
     | '<<='
     | '+='
     | '-='
     | '*='
     | '%='
     | '&='
     | '/='
     | '|='
     | '^^='
     | '^='
     | '~='

 assocArrayLiteral ::=
     '[' keyValuePairs ']'

 atAttribute ::=
     '@' (Identifier | '(' argumentList ')' | functionCallExpression)

 attribute ::=
       alignAttribute
     | linkageAttribute
     | pragmaExpression
     | storageClass
     | 'export'
     | 'package'
     | 'private'
     | 'protected'
     | 'public'

 attributeDeclaration ::=
     attribute ':'

 autoDeclaration ::=
     storageClass Identifier '=' initializer (',' Identifier '=' initializer)* ';'

 blockStatement ::=
     '{' declarationsAndStatements? '}'

 bodyStatement ::=
     'body' blockStatement

 breakStatement ::=
     'break' Identifier? ';'

 baseClass ::=
     (typeofExpression '.')? identifierOrTemplateChain

 baseClassList ::=
     baseClass (',' baseClass)*

 builtinType ::=
      'bool'
    | 'byte'
    | 'ubyte'
    | 'short'
    | 'ushort'
    | 'int'
    | 'uint'
    | 'long'
    | 'ulong'
    | 'char'
    | 'wchar'
    | 'dchar'
    | 'float'
    | 'double'
    | 'real'
    | 'ifloat'
    | 'idouble'
    | 'ireal'
    | 'cfloat'
    | 'cdouble'
    | 'creal'
    | 'void'

 caseRangeStatement ::=
     'case' assignExpression ':' '...' 'case' assignExpression ':' declarationsAndStatements

 caseStatement ::=
     'case' argumentList ':' declarationsAndStatements

 castExpression ::=
     'cast' '(' (type | castQualifier)? ')' unaryExpression

 castQualifier ::=
      'const'
    | 'const' 'shared'
    | 'immutable'
    | 'inout'
    | 'inout' 'shared'
    | 'shared'
    | 'shared' 'const'
    | 'shared' 'inout'

 catch_ ::=
     'catch' '(' type Identifier? ')' declarationOrStatement

 catches ::=
       catch_+
     | catch_* lastCatch

 classDeclaration ::=
       'class' Identifier (':' baseClassList)? ';'
     | 'class' Identifier (':' baseClassList)? structBody
     | 'class' Identifier templateParameters constraint? (':' baseClassList)? structBody
     | 'class' Identifier templateParameters (':' baseClassList)? constraint? structBody

 cmpExpression ::=
       shiftExpression
     | equalExpression
     | identityExpression
     | relExpression
     | inExpression

 compileCondition ::=
       versionCondition
     | debugCondition
     | staticIfCondition

 conditionalDeclaration ::=
       compileCondition declaration
     | compileCondition ':' declaration+
     | compileCondition declaration ('else' declaration)?

 conditionalStatement ::=
     compileCondition declarationOrStatement ('else' declarationOrStatement)?

 constraint ::=
     'if' '(' expression ')'

 constructor ::=
       'this' templateParameters parameters memberFunctionAttribute* constraint? (functionBody | ';')

 continueStatement ::=
     'continue' Identifier? ';'

// TODO 23
 debugCondition ::=
//     'debug' ('(' (IntegerLiteral | Identifier) ')')?
     'debug' ('(' Identifier ')')?

// TODO 22
 debugSpecification ::=
//     'debug' '=' (Identifier | IntegerLiteral) ';'
     'debug' '=' Identifier ';'

declaration ::=
     attribute* declaration2

declaration2 ::=
     aliasDeclaration
   | aliasThisDeclaration
   | classDeclaration
   | conditionalDeclaration
   | constructor
   | destructor
   | enumDeclaration
   | functionDeclaration
   | importDeclaration
   | interfaceDeclaration
   | mixinDeclaration
   | mixinTemplateDeclaration
   | pragmaDeclaration
   | sharedStaticConstructor
   | sharedStaticDestructor
   | staticAssertDeclaration
   | staticConstructor
   | staticDestructor
   | structDeclaration
   | templateDeclaration
   | unionDeclaration
   | unittest
   | variableDeclaration
   | attributeDeclaration
   | invariant
   | '{' declaration+ '}'

 declarationsAndStatements ::=
     declarationOrStatement+

 declarationOrStatement ::=
       declaration
     | statement

 declarator ::=
     Identifier ('=' initializer)?

 defaultStatement ::=
     'default' ':' declarationsAndStatements

 deleteExpression ::=
     'delete' unaryExpression

 deprecated ::=
     'deprecated' ('(' assignExpression ')')?

 destructor ::=
     '~' 'this' '(' ')' memberFunctionAttribute* (functionBody | ';')

 doStatement ::=
     'do' statementNoCaseNoDefault 'while' '(' expression ')' ';'

 enumBody ::= ';' | '{' enumMember (',' enumMember?)* '}'

 enumDeclaration ::=
     'enum' Identifier? (':' type)? enumBody

 enumMember ::= Identifier | (Identifier | type) '=' assignExpression

 equalExpression ::=
     shiftExpression ('==' | '!=') shiftExpression

 expression ::=
     assignExpression (',' assignExpression)*

 expressionStatement ::=
     expression ';'

 finalSwitchStatement ::=
     'final' switchStatement

 finally_ ::=
     'finally' declarationOrStatement

 forStatement ::=
     'for' '(' declarationOrStatement expression? ';' expression? ')' declarationOrStatement

 foreachStatement ::=
       ('foreach' | 'foreach_reverse') '(' foreachTypeList ';' expression ')' declarationOrStatement
     | ('foreach' | 'foreach_reverse') '(' foreachType ';' expression '..' expression ')' declarationOrStatement

 foreachType ::=
     typeConstructors? type? Identifier

 foreachTypeList ::=
     foreachType (',' foreachType)*

 functionAttribute ::=
       atAttribute
     | 'pure'
     | 'nothrow'

 functionBody ::=
       blockStatement
     | (inStatement | outStatement | outStatement inStatement | inStatement outStatement)? bodyStatement

 functionCallExpression ::=
       unaryExpression templateArguments? arguments
     | type arguments

//TODO 21
// functionCallStatement ::=
//     functionCallExpression ';'
//     ;


//TODO 31
//functionDeclaration ::=
//       (storageClass | type) Identifier templateParameters? parameters? memberFunctionAttribute* constraint? (functionBody | ';')


functionDeclaration ::=
       (storageClass+ | type) Identifier parameters memberFunctionAttribute* (functionBody | ';')
     | (storageClass+ | type) Identifier templateParameters parameters memberFunctionAttribute* constraint? (functionBody | ';')
     ;

 functionLiteralExpression ::=
     (('function' | 'delegate') type?)? (parameters functionAttribute*)? functionBody

 gotoStatement ::=
     'goto' (Identifier | 'default' | 'case' expression?) ';'

 identifierChain ::=
     Identifier ('.' Identifier)*

//TODO 20
// identifierList ::=
//     Identifier (',' Identifier)*
//     ;

 identifierOrTemplateChain ::=
     identifierOrTemplateInstance ('.' identifierOrTemplateInstance)*

 identifierOrTemplateInstance ::=
       Identifier
     | templateInstance

 identityExpression ::=
     shiftExpression ('is' | '!' 'is') shiftExpression

 ifStatement ::=
     'if' '(' ifCondition ')' declarationOrStatement ('else' declarationOrStatement)?

ifCondition ::=
       'auto' Identifier '=' expression
     | type Identifier '=' expression
     | expression

 importBind ::=
     Identifier ('=' Identifier)?

 importBindings ::=
     singleImport ':' importBind (',' importBind)*

 importDeclaration ::=
       'import' singleImport (',' singleImport)* (',' importBindings)? ';'
     | 'import' importBindings ';'

 importExpression ::=
     'import' '(' assignExpression ')'

// TODO 19
// indexExpression ::=
//     unaryExpression '[' argumentList ']'
//     ;

 inExpression ::=
     shiftExpression ('in' | '!' 'in') shiftExpression

 inStatement ::=
     'in' blockStatement

// TODO 18
// initialize ::=
//       ';'
//     | statementNoCaseNoDefault
//     ;

 initializer ::=
       'void'
     | nonVoidInitializer

 interfaceDeclaration ::=
     'interface' Identifier (';' | (templateParameters constraint?)? (':' baseClassList)? structBody)

 invariant ::=
     'invariant' ('(' ')')? blockStatement

 isExpression ::=
     'is' '(' type Identifier? ((':' | '==') typeSpecialization (',' templateParameterList)?)? ')'

 keyValuePair ::=
     assignExpression ':' assignExpression

 keyValuePairs ::=
     keyValuePair (',' keyValuePair)* ','?

 labeledStatement ::=
     Identifier ':' declarationOrStatement

 lambdaExpression ::=
       Identifier '=>' assignExpression
     | 'function' parameters functionAttribute* '=>' assignExpression
     | 'delegate' parameters functionAttribute* '=>' assignExpression
     | parameters functionAttribute* '=>' assignExpression

 lastCatch ::=
     'catch' statementNoCaseNoDefault

 linkageAttribute ::=
     'extern' '(' Identifier ('++' (',' identifierChain)?)? ')'

 memberFunctionAttribute ::=
       functionAttribute
     | 'immutable'
     | 'inout'
     | 'shared'
     | 'const'

 mixinDeclaration ::=
       mixinExpression ';'
     | templateMixinExpression ';'

 mixinExpression ::=
     'mixin' '(' assignExpression ')'

 mixinTemplateDeclaration ::=
     'mixin' templateDeclaration

 mixinTemplateName ::=
       symbol
     | typeofExpression '.' identifierOrTemplateChain


 moduleDeclaration ::=
     'module' identifierChain ';'

 newAnonClassExpression ::=
     'new' arguments? 'class' arguments? baseClassList? structBody

 newExpression ::=
       'new' type ('[' assignExpression ']' | arguments)?
     | newAnonClassExpression

 statementNoCaseNoDefault ::=
       labeledStatement
     | blockStatement
     | ifStatement
     | whileStatement
     | doStatement
     | forStatement
     | foreachStatement
     | switchStatement
     | finalSwitchStatement
     | continueStatement
     | breakStatement
     | returnStatement
     | gotoStatement
     | withStatement
     | synchronizedStatement
     | tryStatement
     | throwStatement
     | scopeGuardStatement
     | asmStatement
     | conditionalStatement
     | staticAssertStatement
     | versionSpecification
     | debugSpecification
     | expressionStatement

 nonVoidInitializer ::=
       assignExpression
     | arrayInitializer
     | structInitializer
     | functionBody

 operands ::=
     asmExp+

 outStatement ::=
     'out' ('(' Identifier ')')? blockStatement

parameter ::=
     parameterAttribute* type (Identifier? '...' | (Identifier? ('=' assignExpression)?))?

// parameter ::=
//     parameterAttribute* type
//     parameterAttribute* type Identifier? '...'
//     parameterAttribute* type Identifier? ('=' assignExpression)?

 parameterAttribute ::=
       typeConstructor
     | 'final'
     | 'in'
     | 'lazy'
     | 'out'
     | 'ref'
     | 'scope'
     | 'auto'

 parameters ::=
       '(' parameter (',' parameter)* (',' '...')? ')'
     | '(' '...' ')'
     | '(' ')'

// TODO 14
// postblit ::=
//     'this' '(' 'this' ')' memberFunctionAttribute* (functionBody | ';')
//     ;

//TODO 13
// postIncDecExpression ::=
//     unaryExpression ('++' | '--')
//     ;



 pragmaDeclaration ::=
     pragmaExpression ';'

 pragmaExpression ::=
     'pragma' '(' Identifier (',' argumentList)? ')'

// TODO 11
// preIncDecExpression ::=
//     ('++' | '--') unaryExpression
//     ;

// TODO 10
 primaryExpression ::=
       identifierOrTemplateInstance
     | '.' identifierOrTemplateInstance
     | builtinType '.' Identifier
     | typeofExpression
     | typeidExpression
     | vector
     | arrayLiteral
     | assocArrayLiteral
     | '(' expression ')'
     | isExpression
     | lambdaExpression
     | functionLiteralExpression
     | traitsExpression
     | mixinExpression
     | importExpression
     | '$'
     | 'this'
     | 'super'
     | 'null'
     | 'true'
     | 'false'
     | '__DATE__'
     | '__TIME__'
     | '__TIMESTAMP__'
     | '__VENDOR__'
     | '__VERSION__'
     | '__FILE__'
     | '__LINE__'
     | '__MODULE__'
     | '__FUNCTION__'
     | '__PRETTY_FUNCTION__'
  //   | IntegerLiteral
  //   | FloatLiteral
     | StringLiteral+
  //   | CharacterLiteral

// TODO 9
 register ::=
     Identifier
//     | Identifier '(' IntegerLiteral ')'



 relOperator ::=
       '<'
     | '<='
     | '>'
     | '>='
     | '!<>='
     | '!<>'
     | '<>'
     | '<>='
     | '!>'
     | '!>='
     | '!<'
     | '!<='
     ;

 returnStatement ::=
     'return' expression? ';'


 scopeGuardStatement ::=
     'scope' '(' Identifier ')' statementNoCaseNoDefault


 sharedStaticConstructor ::=
     'shared' 'static' 'this' '(' ')' functionBody


 sharedStaticDestructor ::=
     'shared' 'static' '~' 'this' '(' ')' functionBody




 singleImport ::=
     (Identifier '=')? identifierChain



// TODO 6
// sliceExpression ::=
//       unaryExpression '[' assignExpression '..' assignExpression ']'
//     | unaryExpression '[' ']'
//     ;

 statement ::=
       statementNoCaseNoDefault
     | caseStatement
     | caseRangeStatement
     | defaultStatement


 staticAssertDeclaration ::=
     staticAssertStatement


 staticAssertStatement ::=
     'static' assertExpression ';'


 staticConstructor ::=
     'static' 'this' '(' ')' functionBody


 staticDestructor ::=
     'static' '~' 'this' '(' ')' functionBody


 staticIfCondition ::=
     'static' 'if' '(' assignExpression ')'


 storageClass ::=
       atAttribute
     | typeConstructor
     | deprecated
     | 'abstract'
     | 'auto'
     | 'enum'
     | 'extern'
     | 'final'
     | 'nothrow'
     | 'override'
     | 'pure'
     | 'ref'
     | '__gshared'
     | 'scope'
     | 'static'
     | 'synchronized'


 structBody ::=
     '{' declaration* '}'


 structDeclaration ::=
     'struct' Identifier? (templateParameters constraint? structBody | (structBody | ';'))


 structInitializer ::=
     '{' structMemberInitializers? '}'


 structMemberInitializer ::=
     (Identifier ':')? nonVoidInitializer


 structMemberInitializers ::=
     structMemberInitializer (',' structMemberInitializer?)*


 switchStatement ::=
     'switch' '(' expression ')' statement


 symbol ::=
     '.'? identifierOrTemplateChain


 synchronizedStatement ::=
     'synchronized' ('(' expression ')')? statementNoCaseNoDefault


 templateAliasParameter ::=
      'alias' type? Identifier (':' (type | assignExpression))? ('=' (type | assignExpression))?


 templateArgument ::=
       type
     | assignExpression


 templateArgumentList ::=
     templateArgument (',' templateArgument?)*


 templateArguments ::=
     '!' ('(' templateArgumentList? ')' | templateSingleArgument)


 templateDeclaration ::=
       'template' Identifier templateParameters constraint? '{' declaration* '}'
     | eponymousTemplateDeclaration


 eponymousTemplateDeclaration ::=
     'enum' Identifier templateParameters '=' assignExpression ';'


 templateInstance ::=
     Identifier templateArguments


 templateMixinExpression ::=
     'mixin' mixinTemplateName templateArguments? Identifier?


 templateParameter ::=
       templateTypeParameter
     | templateValueParameter
     | templateAliasParameter
     | templateTupleParameter
     | templateThisParameter


 templateParameterList ::=
     templateParameter (',' templateParameter?)*


 templateParameters ::=
     '(' templateParameterList? ')'


// TODO 5
 templateSingleArgument ::=
       builtinType
     | Identifier
//     | CharacterLiteral
     | StringLiteral
//     | IntegerLiteral
//     | FloatLiteral
     | 'true'
     | 'false'
     | 'null'
     | 'this'
     | '__DATE__'
     | '__TIME__'
     | '__TIMESTAMP__'
     | '__VENDOR__'
     | '__VERSION__'
     | '__FILE__'
     | '__LINE__'
     | '__MODULE__'
     | '__FUNCTION__'
     | '__PRETTY_FUNCTION__'


 templateThisParameter ::=
     'this' templateTypeParameter


 templateTupleParameter ::=
     Identifier '...'


 templateTypeParameter ::=
     Identifier (':' type)? ('=' type)?


 templateValueParameter ::=
     type Identifier (':' expression)? templateValueParameterDefault?


 templateValueParameterDefault ::=
     '=' ('__FILE__' | '__MODULE__' | '__LINE__' | '__FUNCTION__' | '__PRETTY_FUNCTION__' | assignExpression)


 ternaryExpression ::=
     orOrExpression ('?' expression ':' ternaryExpression)?


 throwStatement ::=
     'throw' expression ';'


 traitsExpression ::=
     '__traits' '(' Identifier ',' templateArgumentList ')'


 tryStatement ::=
     'try' declarationOrStatement ((catches finally_?) | finally_)


 type ::=
     attribute? type2 typeSuffix*


 type2 ::=
       builtinType
     | symbol
     | typeofExpression ('.' identifierOrTemplateChain)?
     | typeConstructor '(' type ')'


 typeConstructor ::=
       'const'
     | 'immutable'
     | 'inout'
     | 'shared'
     | 'scope'


 typeConstructors ::=
     typeConstructor+


 typeSpecialization ::=
       type
     | 'struct'
     | 'union'
     | 'class'
     | 'interface'
     | 'enum'
     | 'function'
     | 'delegate'
     | 'super'
     | 'const'
     | 'immutable'
     | 'inout'
     | 'shared'
     | 'return'
     | 'typedef'
     | '__parameters'


 typeSuffix ::=
       '*'
     | '[' type? ']'
     | '[' assignExpression ']'
     | '[' assignExpression '..'  assignExpression ']'
     | ('delegate' | 'function') parameters memberFunctionAttribute*


 typeidExpression ::=
     'typeid' '(' (type | expression) ')'


 typeofExpression ::=
     'typeof' '(' (expression | 'return') ')'


// TODO 4
unaryExpression ::=
      primaryExpression
    | '&' unaryExpression
    | '!' unaryExpression
    | '*' unaryExpression
    | '+' unaryExpression
    | '-' unaryExpression
    | '~' unaryExpression
    | '++' unaryExpression
    | '--' unaryExpression
//    | unaryExpression templateArguments? arguments
//    | unaryExpression '[' assignExpression '..' assignExpression ']'
//    | unaryExpression '[' ']'
//    | unaryExpression '[' argumentList ']'
    | newExpression
    | deleteExpression
    | castExpression
    | assertExpression
    | '(' type ')' '.' identifierOrTemplateInstance
//    | unaryExpression '.' identifierOrTemplateInstance
//    | unaryExpression '--'
//    | unaryExpression '++'


 unionDeclaration ::=
       'union' Identifier templateParameters constraint? structBody
     | 'union' Identifier (structBody | ';')
     | 'union' structBody


 unittest ::=
     'unittest' blockStatement


 variableDeclaration ::=
       type declarator (',' declarator)* ';'
     | type declarator '=' functionBody
     | autoDeclaration


 vector ::=
     '__vector' '(' type ')'


// TODO 3
 versionCondition ::=
//     'version' '(' (IntegerLiteral | Identifier | 'unittest' | 'assert') ')'
     'version' '(' (Identifier | 'unittest' | 'assert') ')'


// TODO 2
 versionSpecification ::=
//     'version' '=' (Identifier | IntegerLiteral) ';'
     'version' '=' Identifier ';'


 whileStatement ::=
     'while' '(' expression ')' declarationOrStatement


 withStatement ::=
     'with' '(' expression ')' statementNoCaseNoDefault



  asmAndExp ::=
      asmEqualExp ('&' asmEqualExp)?

 // left recursion rules

 // TODO 30
 //addExpression ::=
 //       mulExpression
 //     | addExpression ('+' | '-' | '~') mulExpression

 addExpression ::= mulExpression addExpression2
 private addExpression2 ::= ('+' | '-' | '~') addExpression |

 // TODO 28
 // andAndExpression ::=
 //       orExpression
 ////     | andAndExpression '&&' orExpression

  andAndExpression ::= orExpression andAndExpression2
  private andAndExpression2 ::= '&&' andAndExpression |

 // TODO 27
 // andExpression ::=
 //       cmpExpression
 ////     | andExpression '&' cmpExpression

  andExpression ::= cmpExpression andExpression2
  private andExpression2 ::= '&' andExpression |

 // TODO 26
 // asmAddExp ::=
 //       asmMulExp
 ////     | asmAddExp ('+' | '-') asmMulExp

  asmAddExp ::= asmMulExp asmAddExp2
  private asmAddExp2 ::= ('+' | '-') asmAddExp |

 // TODO 25
 // asmBrExp ::=
 //       asmUnaExp
 //     | asmBrExp '[' asmExp ']'

  asmBrExp ::= asmUnaExp asmBrExp2
  private asmBrExp2 ::= '[' asmExp ']' asmBrExp |

 // TODO 17
 // mulExpression ::=
 //       powExpression
 //     | mulExpression ('*' | '/' | '%') powExpression

  mulExpression ::= powExpression mulExpression2
  private mulExpression2 ::= ('*' | '/' | '%') mulExpression |

 // TODO 16
 // orExpression ::=
 //       xorExpression
 //     | orExpression '|' xorExpression

 orExpression ::= xorExpression orExpression2
 private orExpression2 ::= '|' orExpression |

 // TODO 15
 // orOrExpression ::=
 //       andAndExpression
 //     | orOrExpression '||' andAndExpression

 orOrExpression ::= andAndExpression orOrExpression2
 private orOrExpression2 ::= '||' orOrExpression |

 // TODO 12
 // powExpression ::=
 //       unaryExpression
 //     | powExpression '^^' unaryExpression

  powExpression ::= unaryExpression powExpression2
  private powExpression2 ::= '^^' powExpression |

 //TODO 8
 // relExpression ::=
 //       shiftExpression
 //     | relExpression relOperator shiftExpression

  relExpression ::= shiftExpression relExpression2
  private relExpression2 ::= relOperator relExpression |

 //TODO 7
 // shiftExpression ::=
 //       addExpression
 //     | shiftExpression ('<<' | '>>' | '>>>') addExpression

  shiftExpression ::= addExpression shiftExpression2
  private shiftExpression2 ::= ('<<' | '>>' | '>>>') shiftExpression |

 // TODO 1
 // xorExpression ::=
 //       andExpression
 //     | xorExpression '^' andExpression

  xorExpression ::= andExpression xorExpression2
  private xorExpression2 ::= '^' xorExpression |
