package net.masterthought.dlanguage.psi.interfaces;

import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.tree.IElementType;
import ddt.dtool.parser.DeeTokens;
import net.masterthought.dlanguage.lexer.DeeTokenLookUp;
import net.masterthought.dlanguage.psi.DElementType;

public interface DElementTypes {

    IElementType NULL = new DElementType("NULL");
    IElementType SYMBOL = new DElementType("SYMBOL");
    IElementType MODULE = new DElementType("MODULE");
    IElementType DECLARATION_MODULE = new DElementType("DECLARATION_MODULE");
    IElementType DECLARATION_IMPORT = new DElementType("DECLARATION_IMPORT");
    IElementType IMPORT_CONTENT = new DElementType("IMPORT_CONTENT");
    IElementType IMPORT_ALIAS = new DElementType("IMPORT_ALIAS");
    IElementType IMPORT_SELECTIVE = new DElementType("IMPORT_SELECTIVE");
    IElementType IMPORT_SELECTIVE_ALIAS = new DElementType("IMPORT_SELECTIVE_ALIAS");
    IElementType DECL_LIST = new DElementType("DECL_LIST");
    IElementType DECL_BLOCK = new DElementType("DECL_BLOCK");
    IElementType DECLARATION_EMTPY = new DElementType("DECLARATION_EMTPY");
    IElementType MISSING_DECLARATION = new DElementType("MISSING_DECLARATION");
    IElementType INVALID_SYNTAX = new DElementType("INVALID_SYNTAX");
    IElementType INCOMPLETE_DECLARATOR = new DElementType("INCOMPLETE_DECLARATOR");
    IElementType REF_IMPORT_SELECTION = new DElementType("REF_IMPORT_SELECTION");
    IElementType REF_MODULE = new DElementType("REF_MODULE");
    IElementType REF_IDENTIFIER = new DElementType("REF_IDENTIFIER");
    IElementType REF_QUALIFIED = new DElementType("REF_QUALIFIED");
    IElementType REF_MODULE_QUALIFIED = new DElementType("REF_MODULE_QUALIFIED");
    IElementType REF_PRIMITIVE = new DElementType("REF_PRIMITIVE");
    IElementType REF_TYPE_DYN_ARRAY = new DElementType("REF_TYPE_DYN_ARRAY");
    IElementType REF_TYPE_POINTER = new DElementType("REF_TYPE_POINTER");
    IElementType REF_INDEXING = new DElementType("REF_INDEXING");
    IElementType REF_SLICE = new DElementType("REF_SLICE");
    IElementType REF_TYPE_FUNCTION = new DElementType("REF_TYPE_FUNCTION");
    IElementType REF_TEMPLATE_INSTANCE = new DElementType("REF_TEMPLATE_INSTANCE");
    IElementType REF_TYPEOF = new DElementType("REF_TYPEOF");
    IElementType REF_MODIFIER = new DElementType("REF_MODIFIER");
    IElementType REF_AUTO = new DElementType("REF_AUTO");
    IElementType MISSING_EXPRESSION = new DElementType("MISSING_EXPRESSION");
    IElementType EXP_REF_RETURN = new DElementType("EXP_REF_RETURN");
    IElementType EXP_THIS = new DElementType("EXP_THIS");
    IElementType EXP_SUPER = new DElementType("EXP_SUPER");
    IElementType EXP_NULL = new DElementType("EXP_NULL");
    IElementType EXP_ARRAY_LENGTH = new DElementType("EXP_ARRAY_LENGTH");
    IElementType EXP_LITERAL_BOOL = new DElementType("EXP_LITERAL_BOOL");
    IElementType EXP_LITERAL_INTEGER = new DElementType("EXP_LITERAL_INTEGER");
    IElementType EXP_LITERAL_STRING = new DElementType("EXP_LITERAL_STRING");
    IElementType EXP_LITERAL_CHAR = new DElementType("EXP_LITERAL_CHAR");
    IElementType EXP_LITERAL_FLOAT = new DElementType("EXP_LITERAL_FLOAT");
    IElementType EXP_LITERAL_ARRAY = new DElementType("EXP_LITERAL_ARRAY");
    IElementType EXP_LITERAL_MAPARRAY = new DElementType("EXP_LITERAL_MAPARRAY");
    IElementType MAPARRAY_ENTRY = new DElementType("MAPARRAY_ENTRY");
    IElementType EXP_FUNCTION_LITERAL = new DElementType("EXP_FUNCTION_LITERAL");
    IElementType EXP_SIMPLE_LAMBDA = new DElementType("EXP_SIMPLE_LAMBDA");
    IElementType SIMPLE_LAMBDA_DEFUNIT = new DElementType("SIMPLE_LAMBDA_DEFUNIT");
    IElementType EXP_REFERENCE = new DElementType("EXP_REFERENCE");
    IElementType EXP_PARENTHESES = new DElementType("EXP_PARENTHESES");
    IElementType EXP_ASSERT = new DElementType("EXP_ASSERT");
    IElementType EXP_MIXIN_STRING = new DElementType("EXP_MIXIN_STRING");
    IElementType EXP_IMPORT_STRING = new DElementType("EXP_IMPORT_STRING");
    IElementType EXP_TYPEID = new DElementType("EXP_TYPEID");
    IElementType EXP_INDEX = new DElementType("EXP_INDEX");
    IElementType EXP_CALL = new DElementType("EXP_CALL");
    IElementType EXP_PREFIX = new DElementType("EXP_PREFIX");
    IElementType EXP_NEW = new DElementType("EXP_NEW");
    IElementType EXP_NEW_ANON_CLASS = new DElementType("EXP_NEW_ANON_CLASS");
    IElementType EXP_CAST = new DElementType("EXP_CAST");
    IElementType EXP_CAST_QUAL = new DElementType("EXP_CAST_QUAL");
    IElementType EXP_POSTFIX_OP = new DElementType("EXP_POSTFIX_OP");
    IElementType EXP_INFIX = new DElementType("EXP_INFIX");
    IElementType EXP_CONDITIONAL = new DElementType("EXP_CONDITIONAL");
    IElementType EXP_IS = new DElementType("EXP_IS");
    IElementType STATIC_IF_EXP_IS = new DElementType("STATIC_IF_EXP_IS");
    IElementType STATIC_IF_EXP_IS_DEF_UNIT = new DElementType("STATIC_IF_EXP_IS_DEF_UNIT");
    IElementType EXP_TRAITS = new DElementType("EXP_TRAITS");
    IElementType DECLARATION_ATTRIB = new DElementType("DECLARATION_ATTRIB");
    IElementType ATTRIB_LINKAGE = new DElementType("ATTRIB_LINKAGE");
    IElementType ATTRIB_CPP_LINKAGE = new DElementType("ATTRIB_CPP_LINKAGE");
    IElementType ATTRIB_ALIGN = new DElementType("ATTRIB_ALIGN");
    IElementType ATTRIB_PRAGMA = new DElementType("ATTRIB_PRAGMA");
    IElementType ATTRIB_PROTECTION = new DElementType("ATTRIB_PROTECTION");
    IElementType ATTRIB_BASIC = new DElementType("ATTRIB_BASIC");
    IElementType ATTRIB_AT_KEYWORD = new DElementType("ATTRIB_AT_KEYWORD");
    IElementType ATTRIB_CUSTOM = new DElementType("ATTRIB_CUSTOM");
    IElementType DECLARATION_MIXIN_STRING = new DElementType("DECLARATION_MIXIN_STRING");
    IElementType DECLARATION_MIXIN = new DElementType("DECLARATION_MIXIN");
    IElementType DECLARATION_ALIAS_THIS = new DElementType("DECLARATION_ALIAS_THIS");
    IElementType DECLARATION_INVARIANT = new DElementType("DECLARATION_INVARIANT");
    IElementType DECLARATION_UNITEST = new DElementType("DECLARATION_UNITEST");
    IElementType DECLARATION_ALLOCATOR_FUNCTION = new DElementType("DECLARATION_ALLOCATOR_FUNCTION");
    IElementType DECLARATION_SPECIAL_FUNCTION = new DElementType("DECLARATION_SPECIAL_FUNCTION");
    IElementType DECLARATION_DEBUG_VERSION_SPEC = new DElementType("DECLARATION_DEBUG_VERSION_SPEC");
    IElementType DECLARATION_DEBUG_VERSION = new DElementType("DECLARATION_DEBUG_VERSION");
    IElementType DECLARATION_STATIC_IF = new DElementType("DECLARATION_STATIC_IF");
    IElementType DECLARATION_STATIC_ASSERT = new DElementType("DECLARATION_STATIC_ASSERT");
    IElementType DEFINITION_VARIABLE = new DElementType("DEFINITION_VARIABLE");
    IElementType DEFINITION_VAR_FRAGMENT = new DElementType("DEFINITION_VAR_FRAGMENT");
    IElementType DEFINITION_AUTO_VARIABLE = new DElementType("DEFINITION_AUTO_VARIABLE");
    IElementType CSTYLE_ROOT_REF = new DElementType("CSTYLE_ROOT_REF");
    IElementType INITIALIZER_VOID = new DElementType("INITIALIZER_VOID");
    IElementType INITIALIZER_ARRAY = new DElementType("INITIALIZER_ARRAY");
    IElementType ARRAY_INIT_ENTRY = new DElementType("ARRAY_INIT_ENTRY");
    IElementType INITIALIZER_STRUCT = new DElementType("INITIALIZER_STRUCT");
    IElementType STRUCT_INIT_ENTRY = new DElementType("STRUCT_INIT_ENTRY");
    IElementType DEFINITION_FUNCTION = new DElementType("DEFINITION_FUNCTION");
    IElementType FUNCTION_PARAMETER = new DElementType("FUNCTION_PARAMETER");
    IElementType NAMELESS_PARAMETER = new DElementType("NAMELESS_PARAMETER");
    IElementType VAR_ARGS_PARAMETER = new DElementType("VAR_ARGS_PARAMETER");
    IElementType FUNCTION_BODY = new DElementType("FUNCTION_BODY");
    IElementType IN_OUT_FUNCTION_BODY = new DElementType("IN_OUT_FUNCTION_BODY");
    IElementType FUNCTION_BODY_OUT_BLOCK = new DElementType("FUNCTION_BODY_OUT_BLOCK");
    IElementType DEFINITION_CONSTRUCTOR = new DElementType("DEFINITION_CONSTRUCTOR");
    IElementType DEFINITION_STRUCT = new DElementType("DEFINITION_STRUCT");
    IElementType DEFINITION_UNION = new DElementType("DEFINITION_UNION");
    IElementType DEFINITION_CLASS = new DElementType("DEFINITION_CLASS");
    IElementType DEFINITION_INTERFACE = new DElementType("DEFINITION_INTERFACE");
    IElementType DEFINITION_TEMPLATE = new DElementType("DEFINITION_TEMPLATE");
    IElementType TEMPLATE_TYPE_PARAM = new DElementType("TEMPLATE_TYPE_PARAM");
    IElementType TEMPLATE_VALUE_PARAM = new DElementType("TEMPLATE_VALUE_PARAM");
    IElementType TEMPLATE_ALIAS_PARAM = new DElementType("TEMPLATE_ALIAS_PARAM");
    IElementType TEMPLATE_TUPLE_PARAM = new DElementType("TEMPLATE_TUPLE_PARAM");
    IElementType TEMPLATE_THIS_PARAM = new DElementType("TEMPLATE_THIS_PARAM");
    IElementType DEFINITION_MIXIN_INSTANCE = new DElementType("DEFINITION_MIXIN_INSTANCE");
    IElementType DEFINITION_ENUM = new DElementType("DEFINITION_ENUM");
    IElementType DECLARATION_ENUM = new DElementType("DECLARATION_ENUM");
    IElementType ENUM_BODY = new DElementType("ENUM_BODY");
    IElementType ENUM_MEMBER = new DElementType("ENUM_MEMBER");
    IElementType DEFINITION_ENUM_VAR = new DElementType("DEFINITION_ENUM_VAR");
    IElementType DEFINITION_ENUM_VAR_FRAGMENT = new DElementType("DEFINITION_ENUM_VAR_FRAGMENT");
    IElementType DEFINITION_ALIAS = new DElementType("DEFINITION_ALIAS");
    IElementType DEFINITION_ALIAS_FRAGMENT = new DElementType("DEFINITION_ALIAS_FRAGMENT");
    IElementType DEFINITION_ALIAS_VAR_DECL = new DElementType("DEFINITION_ALIAS_VAR_DECL");
    IElementType DEFINITION_ALIAS_FUNCTION_DECL = new DElementType("DEFINITION_ALIAS_FUNCTION_DECL");
    IElementType ALIAS_VAR_DECL_FRAGMENT = new DElementType("ALIAS_VAR_DECL_FRAGMENT");
    IElementType TEMPLATE_TYPE_PARAM__INSTANCE = new DElementType("TEMPLATE_TYPE_PARAM__INSTANCE");
    IElementType TEMPLATE_VALUE_PARAM__INSTANCE = new DElementType("TEMPLATE_VALUE_PARAM__INSTANCE");
    IElementType TEMPLATE_ALIAS_PARAM__INSTANCE = new DElementType("TEMPLATE_ALIAS_PARAM__INSTANCE");
    IElementType BLOCK_STATEMENT = new DElementType("BLOCK_STATEMENT");
    IElementType BLOCK_STATEMENT_UNSCOPED = new DElementType("BLOCK_STATEMENT_UNSCOPED");
    IElementType EMPTY_STATEMENT = new DElementType("EMPTY_STATEMENT");
    IElementType SCOPED_STATEMENT_LIST = new DElementType("SCOPED_STATEMENT_LIST");
    IElementType STATEMENT_EXPRESSION = new DElementType("STATEMENT_EXPRESSION");
    IElementType STATEMENT_LABEL = new DElementType("STATEMENT_LABEL");
    IElementType STATEMENT_IF = new DElementType("STATEMENT_IF");
    IElementType STATEMENT_IF_VAR = new DElementType("STATEMENT_IF_VAR");
    IElementType VARIABLE_DEF_WITH_INIT = new DElementType("VARIABLE_DEF_WITH_INIT");
    IElementType STATEMENT_WHILE = new DElementType("STATEMENT_WHILE");
    IElementType STATEMENT_DO_WHILE = new DElementType("STATEMENT_DO_WHILE");
    IElementType STATEMENT_FOR = new DElementType("STATEMENT_FOR");
    IElementType STATEMENT_FOREACH = new DElementType("STATEMENT_FOREACH");
    IElementType FOREACH_VARIABLE_DEF = new DElementType("FOREACH_VARIABLE_DEF");
    IElementType STATEMENT_SWITCH = new DElementType("STATEMENT_SWITCH");
    IElementType STATEMENT_CASE = new DElementType("STATEMENT_CASE");
    IElementType STATEMENT_CASE_RANGE = new DElementType("STATEMENT_CASE_RANGE");
    IElementType STATEMENT_DEFAULT = new DElementType("STATEMENT_DEFAULT");
    IElementType STATEMENT_CONTINUE = new DElementType("STATEMENT_CONTINUE");
    IElementType STATEMENT_BREAK = new DElementType("STATEMENT_BREAK");
    IElementType STATEMENT_RETURN = new DElementType("STATEMENT_RETURN");
    IElementType STATEMENT_GOTO = new DElementType("STATEMENT_GOTO");
    IElementType STATEMENT_GOTO_DEFAULT = new DElementType("STATEMENT_GOTO_DEFAULT");
    IElementType STATEMENT_GOTO_CASE = new DElementType("STATEMENT_GOTO_CASE");
    IElementType STATEMENT_THROW = new DElementType("STATEMENT_THROW");
    IElementType STATEMENT_SYNCHRONIZED = new DElementType("STATEMENT_SYNCHRONIZED");
    IElementType STATEMENT_WITH = new DElementType("STATEMENT_WITH");
    IElementType STATEMENT_ASM = new DElementType("STATEMENT_ASM");
    IElementType STATEMENT_SCOPE = new DElementType("STATEMENT_SCOPE");
    IElementType STATEMENT_TRY = new DElementType("STATEMENT_TRY");
    IElementType TRY_CATCH_CLAUSE = new DElementType("TRY_CATCH_CLAUSE");
    IElementType SIMPLE_VARIABLE_DEF = new DElementType("SIMPLE_VARIABLE_DEF");

    // Token Types
    IElementType EOF = DeeTokenLookUp.valueOf(DeeTokens.EOF);
    IElementType INVALID_TOKEN = DeeTokenLookUp.valueOf(DeeTokens.INVALID_TOKEN);
    IElementType LINE_END = DeeTokenLookUp.valueOf(DeeTokens.LINE_END);
    IElementType WHITESPACE = DeeTokenLookUp.valueOf(DeeTokens.WHITESPACE);
    IElementType GROUP_COMMENT = DeeTokenLookUp.valueOf(DeeTokens.GROUP_COMMENT);
    IElementType COMMENT_MULTI = DeeTokenLookUp.valueOf(DeeTokens.COMMENT_MULTI);
    IElementType COMMENT_NESTED = DeeTokenLookUp.valueOf(DeeTokens.COMMENT_NESTED);
    IElementType COMMENT_LINE = DeeTokenLookUp.valueOf(DeeTokens.COMMENT_LINE);
    IElementType DOCCOMMENT_MULTI = DeeTokenLookUp.valueOf(DeeTokens.DOCCOMMENT_MULTI);
    IElementType DOCCOMMENT_NESTED = DeeTokenLookUp.valueOf(DeeTokens.DOCCOMMENT_NESTED);
    IElementType DOCCOMMENT_LINE = DeeTokenLookUp.valueOf(DeeTokens.DOCCOMMENT_LINE);
    IElementType SCRIPT_LINE_INTRO = DeeTokenLookUp.valueOf(DeeTokens.SCRIPT_LINE_INTRO);
    IElementType SPECIAL_TOKEN_LINE = DeeTokenLookUp.valueOf(DeeTokens.SPECIAL_TOKEN_LINE);
    IElementType IDENTIFIER = DeeTokenLookUp.valueOf(DeeTokens.IDENTIFIER);
    IElementType GROUP_STRING = DeeTokenLookUp.valueOf(DeeTokens.GROUP_STRING);
    IElementType STRING_WYSIWYG = DeeTokenLookUp.valueOf(DeeTokens.STRING_WYSIWYG);
    IElementType STRING_DQ = DeeTokenLookUp.valueOf(DeeTokens.STRING_DQ);
    IElementType STRING_HEX = DeeTokenLookUp.valueOf(DeeTokens.STRING_HEX);
    IElementType STRING_DELIM = DeeTokenLookUp.valueOf(DeeTokens.STRING_DELIM);
    IElementType STRING_TOKENS = DeeTokenLookUp.valueOf(DeeTokens.STRING_TOKENS);
    IElementType CHARACTER = DeeTokenLookUp.valueOf(DeeTokens.CHARACTER);
    IElementType GROUP_INTEGER = DeeTokenLookUp.valueOf(DeeTokens.GROUP_INTEGER);
    IElementType INTEGER_DECIMAL = DeeTokenLookUp.valueOf(DeeTokens.INTEGER_DECIMAL);
    IElementType INTEGER_BINARY = DeeTokenLookUp.valueOf(DeeTokens.INTEGER_BINARY);
    IElementType INTEGER_OCTAL = DeeTokenLookUp.valueOf(DeeTokens.INTEGER_OCTAL);
    IElementType INTEGER_HEX = DeeTokenLookUp.valueOf(DeeTokens.INTEGER_HEX);
    IElementType GROUP_FLOAT = DeeTokenLookUp.valueOf(DeeTokens.GROUP_FLOAT);
    IElementType FLOAT_DECIMAL = DeeTokenLookUp.valueOf(DeeTokens.FLOAT_DECIMAL);
    IElementType FLOAT_HEX = DeeTokenLookUp.valueOf(DeeTokens.FLOAT_HEX);
    IElementType OPEN_PARENS = DeeTokenLookUp.valueOf(DeeTokens.OPEN_PARENS);
    IElementType CLOSE_PARENS = DeeTokenLookUp.valueOf(DeeTokens.CLOSE_PARENS);
    IElementType OPEN_BRACE = DeeTokenLookUp.valueOf(DeeTokens.OPEN_BRACE);
    IElementType CLOSE_BRACE = DeeTokenLookUp.valueOf(DeeTokens.CLOSE_BRACE);
    IElementType OPEN_BRACKET = DeeTokenLookUp.valueOf(DeeTokens.OPEN_BRACKET);
    IElementType CLOSE_BRACKET = DeeTokenLookUp.valueOf(DeeTokens.CLOSE_BRACKET);
    IElementType SEMICOLON = DeeTokenLookUp.valueOf(DeeTokens.SEMICOLON);
    IElementType COLON = DeeTokenLookUp.valueOf(DeeTokens.COLON);
    IElementType QUESTION = DeeTokenLookUp.valueOf(DeeTokens.QUESTION);
    IElementType COMMA = DeeTokenLookUp.valueOf(DeeTokens.COMMA);
    IElementType DOLLAR = DeeTokenLookUp.valueOf(DeeTokens.DOLLAR);
    IElementType AT = DeeTokenLookUp.valueOf(DeeTokens.AT);
    IElementType DOT = DeeTokenLookUp.valueOf(DeeTokens.DOT);
    IElementType DOUBLE_DOT = DeeTokenLookUp.valueOf(DeeTokens.DOUBLE_DOT);
    IElementType TRIPLE_DOT = DeeTokenLookUp.valueOf(DeeTokens.TRIPLE_DOT);
    IElementType DECREMENT = DeeTokenLookUp.valueOf(DeeTokens.DECREMENT);
    IElementType INCREMENT = DeeTokenLookUp.valueOf(DeeTokens.INCREMENT);
    IElementType MINUS = DeeTokenLookUp.valueOf(DeeTokens.MINUS);
    IElementType MINUS_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.MINUS_ASSIGN);
    IElementType PLUS = DeeTokenLookUp.valueOf(DeeTokens.PLUS);
    IElementType PLUS_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.PLUS_ASSIGN);
    IElementType DIV = DeeTokenLookUp.valueOf(DeeTokens.DIV);
    IElementType DIV_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.DIV_ASSIGN);
    IElementType STAR = DeeTokenLookUp.valueOf(DeeTokens.STAR);
    IElementType MULT_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.MULT_ASSIGN);
    IElementType MOD = DeeTokenLookUp.valueOf(DeeTokens.MOD);
    IElementType MOD_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.MOD_ASSIGN);
    IElementType POW = DeeTokenLookUp.valueOf(DeeTokens.POW);
    IElementType POW_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.POW_ASSIGN);
    IElementType AND = DeeTokenLookUp.valueOf(DeeTokens.AND);
    IElementType AND_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.AND_ASSIGN);
    IElementType OR = DeeTokenLookUp.valueOf(DeeTokens.OR);
    IElementType OR_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.OR_ASSIGN);
    IElementType XOR = DeeTokenLookUp.valueOf(DeeTokens.XOR);
    IElementType XOR_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.XOR_ASSIGN);
    IElementType CONCAT = DeeTokenLookUp.valueOf(DeeTokens.CONCAT);
    IElementType CONCAT_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.CONCAT_ASSIGN);
    IElementType LOGICAL_AND = DeeTokenLookUp.valueOf(DeeTokens.LOGICAL_AND);
    IElementType LOGICAL_OR = DeeTokenLookUp.valueOf(DeeTokens.LOGICAL_OR);
    IElementType LAMBDA = DeeTokenLookUp.valueOf(DeeTokens.LAMBDA);
    IElementType ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.ASSIGN);
    IElementType EQUALS = DeeTokenLookUp.valueOf(DeeTokens.EQUALS);
    IElementType NOT = DeeTokenLookUp.valueOf(DeeTokens.NOT);
    IElementType NOT_EQUAL = DeeTokenLookUp.valueOf(DeeTokens.NOT_EQUAL);
    IElementType LESS_THAN = DeeTokenLookUp.valueOf(DeeTokens.LESS_THAN);
    IElementType LESS_EQUAL = DeeTokenLookUp.valueOf(DeeTokens.LESS_EQUAL);
    IElementType GREATER_THAN = DeeTokenLookUp.valueOf(DeeTokens.GREATER_THAN);
    IElementType GREATER_EQUAL = DeeTokenLookUp.valueOf(DeeTokens.GREATER_EQUAL);
    IElementType LESS_GREATER = DeeTokenLookUp.valueOf(DeeTokens.LESS_GREATER);
    IElementType LESS_GREATER_EQUAL = DeeTokenLookUp.valueOf(DeeTokens.LESS_GREATER_EQUAL);
    IElementType UNORDERED_E = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED_E);
    IElementType UNORDERED = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED);
    IElementType UNORDERED_GE = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED_GE);
    IElementType UNORDERED_G = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED_G);
    IElementType UNORDERED_LE = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED_LE);
    IElementType UNORDERED_L = DeeTokenLookUp.valueOf(DeeTokens.UNORDERED_L);
    IElementType LEFT_SHIFT = DeeTokenLookUp.valueOf(DeeTokens.LEFT_SHIFT);
    IElementType LEFT_SHIFT_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.LEFT_SHIFT_ASSIGN);
    IElementType RIGHT_SHIFT = DeeTokenLookUp.valueOf(DeeTokens.RIGHT_SHIFT);
    IElementType RIGHT_SHIFT_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.RIGHT_SHIFT_ASSIGN);
    IElementType TRIPLE_RSHIFT = DeeTokenLookUp.valueOf(DeeTokens.TRIPLE_RSHIFT);
    IElementType TRIPLE_RSHIFT_ASSIGN = DeeTokenLookUp.valueOf(DeeTokens.TRIPLE_RSHIFT_ASSIGN);
    IElementType GROUP_PRIMITIVE_KW = DeeTokenLookUp.valueOf(DeeTokens.GROUP_PRIMITIVE_KW);
    IElementType KW_BOOL = DeeTokenLookUp.valueOf(DeeTokens.KW_BOOL);
    IElementType KW_VOID = DeeTokenLookUp.valueOf(DeeTokens.KW_VOID);
    IElementType KW_BYTE = DeeTokenLookUp.valueOf(DeeTokens.KW_BYTE);
    IElementType KW_UBYTE = DeeTokenLookUp.valueOf(DeeTokens.KW_UBYTE);
    IElementType KW_SHORT = DeeTokenLookUp.valueOf(DeeTokens.KW_SHORT);
    IElementType KW_USHORT = DeeTokenLookUp.valueOf(DeeTokens.KW_USHORT);
    IElementType KW_INT = DeeTokenLookUp.valueOf(DeeTokens.KW_INT);
    IElementType KW_UINT = DeeTokenLookUp.valueOf(DeeTokens.KW_UINT);
    IElementType KW_LONG = DeeTokenLookUp.valueOf(DeeTokens.KW_LONG);
    IElementType KW_ULONG = DeeTokenLookUp.valueOf(DeeTokens.KW_ULONG);
    IElementType KW_CENT = DeeTokenLookUp.valueOf(DeeTokens.KW_CENT);
    IElementType KW_UCENT = DeeTokenLookUp.valueOf(DeeTokens.KW_UCENT);
    IElementType KW_CHAR = DeeTokenLookUp.valueOf(DeeTokens.KW_CHAR);
    IElementType KW_WCHAR = DeeTokenLookUp.valueOf(DeeTokens.KW_WCHAR);
    IElementType KW_DCHAR = DeeTokenLookUp.valueOf(DeeTokens.KW_DCHAR);
    IElementType KW_FLOAT = DeeTokenLookUp.valueOf(DeeTokens.KW_FLOAT);
    IElementType KW_DOUBLE = DeeTokenLookUp.valueOf(DeeTokens.KW_DOUBLE);
    IElementType KW_REAL = DeeTokenLookUp.valueOf(DeeTokens.KW_REAL);
    IElementType KW_IFLOAT = DeeTokenLookUp.valueOf(DeeTokens.KW_IFLOAT);
    IElementType KW_IDOUBLE = DeeTokenLookUp.valueOf(DeeTokens.KW_IDOUBLE);
    IElementType KW_IREAL = DeeTokenLookUp.valueOf(DeeTokens.KW_IREAL);
    IElementType KW_CFLOAT = DeeTokenLookUp.valueOf(DeeTokens.KW_CFLOAT);
    IElementType KW_CDOUBLE = DeeTokenLookUp.valueOf(DeeTokens.KW_CDOUBLE);
    IElementType KW_CREAL = DeeTokenLookUp.valueOf(DeeTokens.KW_CREAL);
    IElementType GROUP_PROTECTION_KW = DeeTokenLookUp.valueOf(DeeTokens.GROUP_PROTECTION_KW);
    IElementType KW_PRIVATE = DeeTokenLookUp.valueOf(DeeTokens.KW_PRIVATE);
    IElementType KW_PACKAGE = DeeTokenLookUp.valueOf(DeeTokens.KW_PACKAGE);
    IElementType KW_PROTECTED = DeeTokenLookUp.valueOf(DeeTokens.KW_PROTECTED);
    IElementType KW_PUBLIC = DeeTokenLookUp.valueOf(DeeTokens.KW_PUBLIC);
    IElementType KW_EXPORT = DeeTokenLookUp.valueOf(DeeTokens.KW_EXPORT);
    IElementType GROUP_ATTRIBUTE_KW = DeeTokenLookUp.valueOf(DeeTokens.GROUP_ATTRIBUTE_KW);
    IElementType KW_ABSTRACT = DeeTokenLookUp.valueOf(DeeTokens.KW_ABSTRACT);
    IElementType KW_DEPRECATED = DeeTokenLookUp.valueOf(DeeTokens.KW_DEPRECATED);
    IElementType KW_FINAL = DeeTokenLookUp.valueOf(DeeTokens.KW_FINAL);
    IElementType KW_NOTHROW = DeeTokenLookUp.valueOf(DeeTokens.KW_NOTHROW);
    IElementType KW_OVERRIDE = DeeTokenLookUp.valueOf(DeeTokens.KW_OVERRIDE);
    IElementType KW_PURE = DeeTokenLookUp.valueOf(DeeTokens.KW_PURE);
    IElementType KW_SCOPE = DeeTokenLookUp.valueOf(DeeTokens.KW_SCOPE);
    IElementType KW_STATIC = DeeTokenLookUp.valueOf(DeeTokens.KW_STATIC);
    IElementType KW_SYNCHRONIZED = DeeTokenLookUp.valueOf(DeeTokens.KW_SYNCHRONIZED);
    IElementType KW_REF = DeeTokenLookUp.valueOf(DeeTokens.KW_REF);
    IElementType KW_CONST = DeeTokenLookUp.valueOf(DeeTokens.KW_CONST);
    IElementType KW_IMMUTABLE = DeeTokenLookUp.valueOf(DeeTokens.KW_IMMUTABLE);
    IElementType KW_INOUT = DeeTokenLookUp.valueOf(DeeTokens.KW_INOUT);
    IElementType KW_SHARED = DeeTokenLookUp.valueOf(DeeTokens.KW_SHARED);
    IElementType KW_AUTO = DeeTokenLookUp.valueOf(DeeTokens.KW_AUTO);
    IElementType KW_ALIAS = DeeTokenLookUp.valueOf(DeeTokens.KW_ALIAS);
    IElementType KW_ALIGN = DeeTokenLookUp.valueOf(DeeTokens.KW_ALIGN);
    IElementType KW_ASM = DeeTokenLookUp.valueOf(DeeTokens.KW_ASM);
    IElementType KW_ASSERT = DeeTokenLookUp.valueOf(DeeTokens.KW_ASSERT);
    IElementType KW_BODY = DeeTokenLookUp.valueOf(DeeTokens.KW_BODY);
    IElementType KW_BREAK = DeeTokenLookUp.valueOf(DeeTokens.KW_BREAK);
    IElementType KW_CASE = DeeTokenLookUp.valueOf(DeeTokens.KW_CASE);
    IElementType KW_CAST = DeeTokenLookUp.valueOf(DeeTokens.KW_CAST);
    IElementType KW_CATCH = DeeTokenLookUp.valueOf(DeeTokens.KW_CATCH);
    IElementType KW_CLASS = DeeTokenLookUp.valueOf(DeeTokens.KW_CLASS);
    IElementType KW_CONTINUE = DeeTokenLookUp.valueOf(DeeTokens.KW_CONTINUE);
    IElementType KW_DEBUG = DeeTokenLookUp.valueOf(DeeTokens.KW_DEBUG);
    IElementType KW_DEFAULT = DeeTokenLookUp.valueOf(DeeTokens.KW_DEFAULT);
    IElementType KW_DELEGATE = DeeTokenLookUp.valueOf(DeeTokens.KW_DELEGATE);
    IElementType KW_DELETE = DeeTokenLookUp.valueOf(DeeTokens.KW_DELETE);
    IElementType KW_DO = DeeTokenLookUp.valueOf(DeeTokens.KW_DO);
    IElementType KW_ELSE = DeeTokenLookUp.valueOf(DeeTokens.KW_ELSE);
    IElementType KW_ENUM = DeeTokenLookUp.valueOf(DeeTokens.KW_ENUM);
    IElementType KW_EXTERN = DeeTokenLookUp.valueOf(DeeTokens.KW_EXTERN);
    IElementType KW_FALSE = DeeTokenLookUp.valueOf(DeeTokens.KW_FALSE);
    IElementType KW_FINALLY = DeeTokenLookUp.valueOf(DeeTokens.KW_FINALLY);
    IElementType KW_FOR = DeeTokenLookUp.valueOf(DeeTokens.KW_FOR);
    IElementType KW_FOREACH = DeeTokenLookUp.valueOf(DeeTokens.KW_FOREACH);
    IElementType KW_FOREACH_REVERSE = DeeTokenLookUp.valueOf(DeeTokens.KW_FOREACH_REVERSE);
    IElementType KW_FUNCTION = DeeTokenLookUp.valueOf(DeeTokens.KW_FUNCTION);
    IElementType KW_GOTO = DeeTokenLookUp.valueOf(DeeTokens.KW_GOTO);
    IElementType KW_IF = DeeTokenLookUp.valueOf(DeeTokens.KW_IF);
    IElementType KW_IMPORT = DeeTokenLookUp.valueOf(DeeTokens.KW_IMPORT);
    IElementType KW_IN = DeeTokenLookUp.valueOf(DeeTokens.KW_IN);
    IElementType KW_INTERFACE = DeeTokenLookUp.valueOf(DeeTokens.KW_INTERFACE);
    IElementType KW_INVARIANT = DeeTokenLookUp.valueOf(DeeTokens.KW_INVARIANT);
    IElementType KW_IS = DeeTokenLookUp.valueOf(DeeTokens.KW_IS);
    IElementType KW_LAZY = DeeTokenLookUp.valueOf(DeeTokens.KW_LAZY);
    IElementType KW_MACRO = DeeTokenLookUp.valueOf(DeeTokens.KW_MACRO);
    IElementType KW_MIXIN = DeeTokenLookUp.valueOf(DeeTokens.KW_MIXIN);
    IElementType KW_MODULE = DeeTokenLookUp.valueOf(DeeTokens.KW_MODULE);
    IElementType KW_NEW = DeeTokenLookUp.valueOf(DeeTokens.KW_NEW);
    IElementType KW_NULL = DeeTokenLookUp.valueOf(DeeTokens.KW_NULL);
    IElementType KW_OUT = DeeTokenLookUp.valueOf(DeeTokens.KW_OUT);
    IElementType KW_PRAGMA = DeeTokenLookUp.valueOf(DeeTokens.KW_PRAGMA);
    IElementType KW_RETURN = DeeTokenLookUp.valueOf(DeeTokens.KW_RETURN);
    IElementType KW_STRUCT = DeeTokenLookUp.valueOf(DeeTokens.KW_STRUCT);
    IElementType KW_SUPER = DeeTokenLookUp.valueOf(DeeTokens.KW_SUPER);
    IElementType KW_SWITCH = DeeTokenLookUp.valueOf(DeeTokens.KW_SWITCH);
    IElementType KW_TEMPLATE = DeeTokenLookUp.valueOf(DeeTokens.KW_TEMPLATE);
    IElementType KW_THIS = DeeTokenLookUp.valueOf(DeeTokens.KW_THIS);
    IElementType KW_THROW = DeeTokenLookUp.valueOf(DeeTokens.KW_THROW);
    IElementType KW_TRUE = DeeTokenLookUp.valueOf(DeeTokens.KW_TRUE);
    IElementType KW_TRY = DeeTokenLookUp.valueOf(DeeTokens.KW_TRY);
    IElementType KW_TYPEDEF = DeeTokenLookUp.valueOf(DeeTokens.KW_TYPEDEF);
    IElementType KW_TYPEID = DeeTokenLookUp.valueOf(DeeTokens.KW_TYPEID);
    IElementType KW_TYPEOF = DeeTokenLookUp.valueOf(DeeTokens.KW_TYPEOF);
    IElementType KW_UNION = DeeTokenLookUp.valueOf(DeeTokens.KW_UNION);
    IElementType KW_UNITTEST = DeeTokenLookUp.valueOf(DeeTokens.KW_UNITTEST);
    IElementType KW_VERSION = DeeTokenLookUp.valueOf(DeeTokens.KW_VERSION);
    IElementType KW_VOLATILE = DeeTokenLookUp.valueOf(DeeTokens.KW_VOLATILE);
    IElementType KW_WHILE = DeeTokenLookUp.valueOf(DeeTokens.KW_WHILE);
    IElementType KW_WITH = DeeTokenLookUp.valueOf(DeeTokens.KW_WITH);
    IElementType KW___TRAITS = DeeTokenLookUp.valueOf(DeeTokens.KW___TRAITS);
    IElementType KW___GSHARED = DeeTokenLookUp.valueOf(DeeTokens.KW___GSHARED);
    IElementType KW___THREAD = DeeTokenLookUp.valueOf(DeeTokens.KW___THREAD);
    IElementType KW___VECTOR = DeeTokenLookUp.valueOf(DeeTokens.KW___VECTOR);
    IElementType KW___FILE__ = DeeTokenLookUp.valueOf(DeeTokens.KW___FILE__);
    IElementType KW___LINE__ = DeeTokenLookUp.valueOf(DeeTokens.KW___LINE__);
    IElementType KW___MODULE__ = DeeTokenLookUp.valueOf(DeeTokens.KW___MODULE__);
    IElementType KW___FUNCTION__ = DeeTokenLookUp.valueOf(DeeTokens.KW___FUNCTION__);
    IElementType KW___PRETTY_FUNCTION__ = DeeTokenLookUp.valueOf(DeeTokens.KW___PRETTY_FUNCTION__);
    IElementType KW___DATE__ = DeeTokenLookUp.valueOf(DeeTokens.KW___DATE__);
    IElementType KW___TIME__ = DeeTokenLookUp.valueOf(DeeTokens.KW___TIME__);
    IElementType KW___TIMESTAMP__ = DeeTokenLookUp.valueOf(DeeTokens.KW___TIMESTAMP__);
    IElementType KW___VENDOR__ = DeeTokenLookUp.valueOf(DeeTokens.KW___VENDOR__);
    IElementType KW___VERSION__ = DeeTokenLookUp.valueOf(DeeTokens.KW___VERSION__);


    class Factory {
        public static PsiElement createElement(ASTNode node) {
            IElementType type = node.getElementType();
            return new DCompositeElementType(node);

//            if (type == MODULE) {
//                return new DModuleDeclarationImpl(node);
//            } else if (type == IMPORT) {
//                return new DImportDeclarationImpl(node);
//            } else {
//                return new DCompositeElementType(node) {
//                };
//            }

        }
    }
}
