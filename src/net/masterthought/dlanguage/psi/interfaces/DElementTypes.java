package net.masterthought.dlanguage.psi.interfaces;

import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.tree.IElementType;
import net.masterthought.dlanguage.lexer.PropertyImpl;
import net.masterthought.dlanguage.parser.DLanguageParserDefinition;
import net.masterthought.dlanguage.psi.DElementType;
import net.masterthought.dlanguage.psi.impl.DImportDeclarationImpl;
import net.masterthought.dlanguage.psi.impl.DModuleDeclarationImpl;

public interface DElementTypes {

//    IElementType MODULE = new DElementType("MODULE");
    IElementType IMPORT = new DElementType("IMPORT");

    IElementType NULL = new DElementType("NULL");
    IElementType SYMBOL = new DElementType("SYMBOL");
    IElementType MODULE = new DElementType("MODULE");
    IElementType DECLARATION_MODULE = new DElementType("DECLARATION_MODULE");
    IElementType DECLARATION_IMPORT = new DElementType("DECLARATION_IMPORT");
    IElementType IMPORT_CONTENT = new DElementType("IMPORT_CONTENT");
    IElementType IMPORT_ALIAS = new DElementType("IMPORT_ALIAS");
    IElementType IMPORT_SELECTIVE = new DElementType("IMPORT_SELECTIVE");
    IElementType IMPORT_SELECTIVE_ALIAS = new DElementType("IMPORT_SELECTIVE_ALIAS");
    IElementType DECL_LIST = new DElementType("DECL_LIST");
    IElementType DECL_BLOCK = new DElementType("DECL_BLOCK");
    IElementType DECLARATION_EMTPY = new DElementType("DECLARATION_EMTPY");
    IElementType MISSING_DECLARATION = new DElementType("MISSING_DECLARATION");
    IElementType INVALID_SYNTAX = new DElementType("INVALID_SYNTAX");
    IElementType INCOMPLETE_DECLARATOR = new DElementType("INCOMPLETE_DECLARATOR");
    IElementType REF_IMPORT_SELECTION = new DElementType("REF_IMPORT_SELECTION");
    IElementType REF_MODULE = new DElementType("REF_MODULE");
    IElementType REF_IDENTIFIER = new DElementType("REF_IDENTIFIER");
    IElementType REF_QUALIFIED = new DElementType("REF_QUALIFIED");
    IElementType REF_MODULE_QUALIFIED = new DElementType("REF_MODULE_QUALIFIED");
    IElementType REF_PRIMITIVE = new DElementType("REF_PRIMITIVE");
    IElementType REF_TYPE_DYN_ARRAY = new DElementType("REF_TYPE_DYN_ARRAY");
    IElementType REF_TYPE_POINTER = new DElementType("REF_TYPE_POINTER");
    IElementType REF_INDEXING = new DElementType("REF_INDEXING");
    IElementType REF_SLICE = new DElementType("REF_SLICE");
    IElementType REF_TYPE_FUNCTION = new DElementType("REF_TYPE_FUNCTION");
    IElementType REF_TEMPLATE_INSTANCE = new DElementType("REF_TEMPLATE_INSTANCE");
    IElementType REF_TYPEOF = new DElementType("REF_TYPEOF");
    IElementType REF_MODIFIER = new DElementType("REF_MODIFIER");
    IElementType REF_AUTO = new DElementType("REF_AUTO");
    IElementType MISSING_EXPRESSION = new DElementType("MISSING_EXPRESSION");
    IElementType EXP_REF_RETURN = new DElementType("EXP_REF_RETURN");
    IElementType EXP_THIS = new DElementType("EXP_THIS");
    IElementType EXP_SUPER = new DElementType("EXP_SUPER");
    IElementType EXP_NULL = new DElementType("EXP_NULL");
    IElementType EXP_ARRAY_LENGTH = new DElementType("EXP_ARRAY_LENGTH");
    IElementType EXP_LITERAL_BOOL = new DElementType("EXP_LITERAL_BOOL");
    IElementType EXP_LITERAL_INTEGER = new DElementType("EXP_LITERAL_INTEGER");
    IElementType EXP_LITERAL_STRING = new DElementType("EXP_LITERAL_STRING");
    IElementType EXP_LITERAL_CHAR = new DElementType("EXP_LITERAL_CHAR");
    IElementType EXP_LITERAL_FLOAT = new DElementType("EXP_LITERAL_FLOAT");
    IElementType EXP_LITERAL_ARRAY = new DElementType("EXP_LITERAL_ARRAY");
    IElementType EXP_LITERAL_MAPARRAY = new DElementType("EXP_LITERAL_MAPARRAY");
    IElementType MAPARRAY_ENTRY = new DElementType("MAPARRAY_ENTRY");
    IElementType EXP_FUNCTION_LITERAL = new DElementType("EXP_FUNCTION_LITERAL");
    IElementType EXP_SIMPLE_LAMBDA = new DElementType("EXP_SIMPLE_LAMBDA");
    IElementType SIMPLE_LAMBDA_DEFUNIT = new DElementType("SIMPLE_LAMBDA_DEFUNIT");
    IElementType EXP_REFERENCE = new DElementType("EXP_REFERENCE");
    IElementType EXP_PARENTHESES = new DElementType("EXP_PARENTHESES");
    IElementType EXP_ASSERT = new DElementType("EXP_ASSERT");
    IElementType EXP_MIXIN_STRING = new DElementType("EXP_MIXIN_STRING");
    IElementType EXP_IMPORT_STRING = new DElementType("EXP_IMPORT_STRING");
    IElementType EXP_TYPEID = new DElementType("EXP_TYPEID");
    IElementType EXP_INDEX = new DElementType("EXP_INDEX");
    IElementType EXP_CALL = new DElementType("EXP_CALL");
    IElementType EXP_PREFIX = new DElementType("EXP_PREFIX");
    IElementType EXP_NEW = new DElementType("EXP_NEW");
    IElementType EXP_NEW_ANON_CLASS = new DElementType("EXP_NEW_ANON_CLASS");
    IElementType EXP_CAST = new DElementType("EXP_CAST");
    IElementType EXP_CAST_QUAL = new DElementType("EXP_CAST_QUAL");
    IElementType EXP_POSTFIX_OP = new DElementType("EXP_POSTFIX_OP");
    IElementType EXP_INFIX = new DElementType("EXP_INFIX");
    IElementType EXP_CONDITIONAL = new DElementType("EXP_CONDITIONAL");
    IElementType EXP_IS = new DElementType("EXP_IS");
    IElementType STATIC_IF_EXP_IS = new DElementType("STATIC_IF_EXP_IS");
    IElementType STATIC_IF_EXP_IS_DEF_UNIT = new DElementType("STATIC_IF_EXP_IS_DEF_UNIT");
    IElementType EXP_TRAITS = new DElementType("EXP_TRAITS");
    IElementType DECLARATION_ATTRIB = new DElementType("DECLARATION_ATTRIB");
    IElementType ATTRIB_LINKAGE = new DElementType("ATTRIB_LINKAGE");
    IElementType ATTRIB_CPP_LINKAGE = new DElementType("ATTRIB_CPP_LINKAGE");
    IElementType ATTRIB_ALIGN = new DElementType("ATTRIB_ALIGN");
    IElementType ATTRIB_PRAGMA = new DElementType("ATTRIB_PRAGMA");
    IElementType ATTRIB_PROTECTION = new DElementType("ATTRIB_PROTECTION");
    IElementType ATTRIB_BASIC = new DElementType("ATTRIB_BASIC");
    IElementType ATTRIB_AT_KEYWORD = new DElementType("ATTRIB_AT_KEYWORD");
    IElementType ATTRIB_CUSTOM = new DElementType("ATTRIB_CUSTOM");
    IElementType DECLARATION_MIXIN_STRING = new DElementType("DECLARATION_MIXIN_STRING");
    IElementType DECLARATION_MIXIN = new DElementType("DECLARATION_MIXIN");
    IElementType DECLARATION_ALIAS_THIS = new DElementType("DECLARATION_ALIAS_THIS");
    IElementType DECLARATION_INVARIANT = new DElementType("DECLARATION_INVARIANT");
    IElementType DECLARATION_UNITEST = new DElementType("DECLARATION_UNITEST");
    IElementType DECLARATION_ALLOCATOR_FUNCTION = new DElementType("DECLARATION_ALLOCATOR_FUNCTION");
    IElementType DECLARATION_SPECIAL_FUNCTION = new DElementType("DECLARATION_SPECIAL_FUNCTION");
    IElementType DECLARATION_DEBUG_VERSION_SPEC = new DElementType("DECLARATION_DEBUG_VERSION_SPEC");
    IElementType DECLARATION_DEBUG_VERSION = new DElementType("DECLARATION_DEBUG_VERSION");
    IElementType DECLARATION_STATIC_IF = new DElementType("DECLARATION_STATIC_IF");
    IElementType DECLARATION_STATIC_ASSERT = new DElementType("DECLARATION_STATIC_ASSERT");
    IElementType DEFINITION_VARIABLE = new DElementType("DEFINITION_VARIABLE");
    IElementType DEFINITION_VAR_FRAGMENT = new DElementType("DEFINITION_VAR_FRAGMENT");
    IElementType DEFINITION_AUTO_VARIABLE = new DElementType("DEFINITION_AUTO_VARIABLE");
    IElementType CSTYLE_ROOT_REF = new DElementType("CSTYLE_ROOT_REF");
    IElementType INITIALIZER_VOID = new DElementType("INITIALIZER_VOID");
    IElementType INITIALIZER_ARRAY = new DElementType("INITIALIZER_ARRAY");
    IElementType ARRAY_INIT_ENTRY = new DElementType("ARRAY_INIT_ENTRY");
    IElementType INITIALIZER_STRUCT = new DElementType("INITIALIZER_STRUCT");
    IElementType STRUCT_INIT_ENTRY = new DElementType("STRUCT_INIT_ENTRY");
    IElementType DEFINITION_FUNCTION = new DElementType("DEFINITION_FUNCTION");
    IElementType FUNCTION_PARAMETER = new DElementType("FUNCTION_PARAMETER");
    IElementType NAMELESS_PARAMETER = new DElementType("NAMELESS_PARAMETER");
    IElementType VAR_ARGS_PARAMETER = new DElementType("VAR_ARGS_PARAMETER");
    IElementType FUNCTION_BODY = new DElementType("FUNCTION_BODY");
    IElementType IN_OUT_FUNCTION_BODY = new DElementType("IN_OUT_FUNCTION_BODY");
    IElementType FUNCTION_BODY_OUT_BLOCK = new DElementType("FUNCTION_BODY_OUT_BLOCK");
    IElementType DEFINITION_CONSTRUCTOR = new DElementType("DEFINITION_CONSTRUCTOR");
    IElementType DEFINITION_STRUCT = new DElementType("DEFINITION_STRUCT");
    IElementType DEFINITION_UNION = new DElementType("DEFINITION_UNION");
    IElementType DEFINITION_CLASS = new DElementType("DEFINITION_CLASS");
    IElementType DEFINITION_INTERFACE = new DElementType("DEFINITION_INTERFACE");
    IElementType DEFINITION_TEMPLATE = new DElementType("DEFINITION_TEMPLATE");
    IElementType TEMPLATE_TYPE_PARAM = new DElementType("TEMPLATE_TYPE_PARAM");
    IElementType TEMPLATE_VALUE_PARAM = new DElementType("TEMPLATE_VALUE_PARAM");
    IElementType TEMPLATE_ALIAS_PARAM = new DElementType("TEMPLATE_ALIAS_PARAM");
    IElementType TEMPLATE_TUPLE_PARAM = new DElementType("TEMPLATE_TUPLE_PARAM");
    IElementType TEMPLATE_THIS_PARAM = new DElementType("TEMPLATE_THIS_PARAM");
    IElementType DEFINITION_MIXIN_INSTANCE = new DElementType("DEFINITION_MIXIN_INSTANCE");
    IElementType DEFINITION_ENUM = new DElementType("DEFINITION_ENUM");
    IElementType DECLARATION_ENUM = new DElementType("DECLARATION_ENUM");
    IElementType ENUM_BODY = new DElementType("ENUM_BODY");
    IElementType ENUM_MEMBER = new DElementType("ENUM_MEMBER");
    IElementType DEFINITION_ENUM_VAR = new DElementType("DEFINITION_ENUM_VAR");
    IElementType DEFINITION_ENUM_VAR_FRAGMENT = new DElementType("DEFINITION_ENUM_VAR_FRAGMENT");
    IElementType DEFINITION_ALIAS = new DElementType("DEFINITION_ALIAS");
    IElementType DEFINITION_ALIAS_FRAGMENT = new DElementType("DEFINITION_ALIAS_FRAGMENT");
    IElementType DEFINITION_ALIAS_VAR_DECL = new DElementType("DEFINITION_ALIAS_VAR_DECL");
    IElementType DEFINITION_ALIAS_FUNCTION_DECL = new DElementType("DEFINITION_ALIAS_FUNCTION_DECL");
    IElementType ALIAS_VAR_DECL_FRAGMENT = new DElementType("ALIAS_VAR_DECL_FRAGMENT");
    IElementType TEMPLATE_TYPE_PARAM__INSTANCE = new DElementType("TEMPLATE_TYPE_PARAM__INSTANCE");
    IElementType TEMPLATE_VALUE_PARAM__INSTANCE = new DElementType("TEMPLATE_VALUE_PARAM__INSTANCE");
    IElementType TEMPLATE_ALIAS_PARAM__INSTANCE = new DElementType("TEMPLATE_ALIAS_PARAM__INSTANCE");
    IElementType BLOCK_STATEMENT = new DElementType("BLOCK_STATEMENT");
    IElementType BLOCK_STATEMENT_UNSCOPED = new DElementType("BLOCK_STATEMENT_UNSCOPED");
    IElementType EMPTY_STATEMENT = new DElementType("EMPTY_STATEMENT");
    IElementType SCOPED_STATEMENT_LIST = new DElementType("SCOPED_STATEMENT_LIST");
    IElementType STATEMENT_EXPRESSION = new DElementType("STATEMENT_EXPRESSION");
    IElementType STATEMENT_LABEL = new DElementType("STATEMENT_LABEL");
    IElementType STATEMENT_IF = new DElementType("STATEMENT_IF");
    IElementType STATEMENT_IF_VAR = new DElementType("STATEMENT_IF_VAR");
    IElementType VARIABLE_DEF_WITH_INIT = new DElementType("VARIABLE_DEF_WITH_INIT");
    IElementType STATEMENT_WHILE = new DElementType("STATEMENT_WHILE");
    IElementType STATEMENT_DO_WHILE = new DElementType("STATEMENT_DO_WHILE");
    IElementType STATEMENT_FOR = new DElementType("STATEMENT_FOR");
    IElementType STATEMENT_FOREACH = new DElementType("STATEMENT_FOREACH");
    IElementType FOREACH_VARIABLE_DEF = new DElementType("FOREACH_VARIABLE_DEF");
    IElementType STATEMENT_SWITCH = new DElementType("STATEMENT_SWITCH");
    IElementType STATEMENT_CASE = new DElementType("STATEMENT_CASE");
    IElementType STATEMENT_CASE_RANGE = new DElementType("STATEMENT_CASE_RANGE");
    IElementType STATEMENT_DEFAULT = new DElementType("STATEMENT_DEFAULT");
    IElementType STATEMENT_CONTINUE = new DElementType("STATEMENT_CONTINUE");
    IElementType STATEMENT_BREAK = new DElementType("STATEMENT_BREAK");
    IElementType STATEMENT_RETURN = new DElementType("STATEMENT_RETURN");
    IElementType STATEMENT_GOTO = new DElementType("STATEMENT_GOTO");
    IElementType STATEMENT_GOTO_DEFAULT = new DElementType("STATEMENT_GOTO_DEFAULT");
    IElementType STATEMENT_GOTO_CASE = new DElementType("STATEMENT_GOTO_CASE");
    IElementType STATEMENT_THROW = new DElementType("STATEMENT_THROW");
    IElementType STATEMENT_SYNCHRONIZED = new DElementType("STATEMENT_SYNCHRONIZED");
    IElementType STATEMENT_WITH = new DElementType("STATEMENT_WITH");
    IElementType STATEMENT_ASM = new DElementType("STATEMENT_ASM");
    IElementType STATEMENT_SCOPE = new DElementType("STATEMENT_SCOPE");
    IElementType STATEMENT_TRY = new DElementType("STATEMENT_TRY");
    IElementType TRY_CATCH_CLAUSE = new DElementType("TRY_CATCH_CLAUSE");
    IElementType SIMPLE_VARIABLE_DEF = new DElementType("SIMPLE_VARIABLE_DEF");

    class Factory {
        public static PsiElement createElement(ASTNode node) {
            IElementType type = node.getElementType();
            if (type == MODULE) {
                return new DModuleDeclarationImpl(node);
            } else if (type == IMPORT) {
                return new DImportDeclarationImpl(node);
            } else {
                return new DCompositeElementType(node) {
                };
            }

        }
    }
}
