/* The following code was generated by JFlex 1.4.3 on 12/12/14 8:05 PM */

package net.masterthought.dlanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.masterthought.dlanguage.psi.DLanguageTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/12/14 8:05 PM from the specification file
 * <tt>/Users/kings/development/projects/DLanguage/src/net/masterthought/dlanguage/Dlanguage.flex</tt>
 */
class DLanguageLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\63"+
    "\1\24\1\0\1\6\1\63\1\64\1\25\1\57\1\57\1\5\1\66"+
    "\1\57\1\23\1\21\1\4\1\10\1\16\1\67\1\15\1\70\1\17"+
    "\1\73\1\71\1\72\1\11\1\57\1\57\1\62\1\60\1\61\1\57"+
    "\1\0\3\14\1\20\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\57\1\26\1\57\1\63\1\6\1\0\1\27\1\30\1\34\1\46"+
    "\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51\1\40"+
    "\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\47"+
    "\1\42\1\56\1\57\1\65\1\57\1\57\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\2\4\2\2\1\5\20\3"+
    "\6\2\1\6\2\0\1\1\1\0\1\4\1\7\1\4"+
    "\1\0\3\4\2\7\2\0\27\3\1\2\1\3\1\2"+
    "\13\3\1\2\1\10\2\0\4\4\1\7\2\0\26\3"+
    "\1\2\15\3\1\11\3\4\1\0\27\3\3\4\1\0"+
    "\6\3\1\2\7\3\1\2\2\3\3\4\1\0\12\3"+
    "\3\4\1\0\7\3\3\4\1\0\3\3\3\4\1\0"+
    "\2\3\3\4\2\0\2\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\1\7\1\0\5\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\360\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\360\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\360\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\360\0\u0924\0\u0960\0\u099c\0\u09d8\0\360"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u01a4\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\360\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\360"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u1860\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\3\10\3\12\1\10\1\13\1\10\1\14\1\0"+
    "\1\15\1\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\10\1\24\1\25\1\26\3\10\1\27\1\10\1\30"+
    "\1\10\1\31\1\10\1\32\1\33\1\34\1\35\1\10"+
    "\1\36\1\7\1\37\1\40\1\7\1\41\1\42\1\43"+
    "\5\12\24\0\1\44\1\0\1\45\73\0\1\46\47\0"+
    "\1\5\171\0\1\47\1\50\52\0\1\36\73\0\1\36"+
    "\21\0\13\10\1\0\1\10\4\0\30\10\10\0\5\10"+
    "\10\0\1\51\1\52\1\53\1\54\1\0\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\54\1\60\16\0\1\55\2\57\1\52\1\57"+
    "\10\0\2\12\1\53\2\0\3\12\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\5\12\10\0\2\61\3\0\3\61\47\0\5\61\23\0"+
    "\1\36\34\0\1\36\6\0\1\63\12\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\64\26\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\65\1\10\1\66"+
    "\4\10\1\67\14\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\70\7\10\1\71\1\72\1\10"+
    "\1\73\7\10\1\74\1\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\4\10\1\75\7\10\1\76\13\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\10\10"+
    "\1\77\17\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\1\100\5\10\1\101\1\102\4\10\1\103\13\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\104\21\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\7\10\1\105\10\10\1\106\7\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\107\7\10\1\110"+
    "\5\10\1\111\11\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\11\10\1\112\7\10\1\113\1\114\5\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\115\1\10\1\116\17\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\1\117\5\10\1\120\1\121\5\10"+
    "\1\122\12\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\1\123\3\10\1\124\11\10\1\125\11\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\6\10\1\126"+
    "\21\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\6\10\1\127\21\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\14\10\1\130\13\10\10\0\5\10\60\0"+
    "\1\36\1\131\72\0\1\36\1\0\1\7\71\0\1\36"+
    "\3\0\1\36\67\0\1\36\4\0\1\36\66\0\1\36"+
    "\5\0\1\36\31\0\2\132\2\0\1\132\1\0\2\132"+
    "\4\0\1\132\7\0\1\132\47\0\2\133\2\0\1\133"+
    "\1\0\2\133\4\0\1\133\7\0\1\133\23\0\1\47"+
    "\1\4\1\5\71\47\5\50\1\134\66\50\10\0\1\51"+
    "\1\52\1\53\2\0\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\13\0\1\53\1\62\6\0\1\60\1\0\1\60"+
    "\16\0\1\55\2\57\1\52\1\57\10\0\2\52\3\0"+
    "\3\52\1\60\1\61\1\62\14\0\1\62\6\0\1\60"+
    "\1\0\1\60\16\0\5\52\10\0\1\135\1\136\2\0"+
    "\5\136\1\0\1\136\4\0\2\136\3\0\1\136\2\0"+
    "\1\136\6\0\1\136\1\0\1\136\16\0\5\136\10\0"+
    "\1\137\1\52\1\53\2\0\3\137\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\137\1\52\1\137\10\0\1\57\1\52\1\53\2\0"+
    "\3\57\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\57\1\52\1\57\10\0"+
    "\1\140\1\52\1\53\2\0\3\140\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\140\1\52\1\140\10\0\2\61\3\0\3\61\1\60"+
    "\1\0\1\62\14\0\1\62\6\0\1\60\1\0\1\60"+
    "\16\0\5\61\10\0\2\141\3\0\3\141\3\0\1\142"+
    "\42\0\1\142\5\141\16\0\1\143\63\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\144\25\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\10\10\1\145\17\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\6\10\1\146"+
    "\21\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\147\24\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\1\150\3\10\1\151\23\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\11\10\1\152\16\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\153\21\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\23\10\1\154\4\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\15\10\1\155\12\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\156\12\10\1\113"+
    "\2\10\1\147\11\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\157\10\10\1\160\12\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\3\10\1\161"+
    "\24\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\2\10\1\147\1\162\24\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\11\10\1\163\16\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\164\27\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\1\120\27\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\11\10"+
    "\1\165\16\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\2\10\1\147\25\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\166\24\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\3\10\1\167\24\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\26\10"+
    "\1\113\1\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\7\10\1\170\20\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\171\1\172\24\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\23\10\1\173"+
    "\4\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\16\10\1\174\11\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\21\10\1\175\6\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\7\10\1\105\20\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\4\10\1\113"+
    "\23\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\6\10\1\176\21\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\11\10\1\177\16\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\5\10\1\200\22\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\6\10\1\201"+
    "\6\10\1\202\12\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\203\26\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\204\24\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\7\10\1\205"+
    "\5\10\1\206\12\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\15\10\1\207\12\10\10\0\5\10\60\0"+
    "\1\36\1\7\37\0\1\210\46\0\4\50\1\5\1\134"+
    "\66\50\10\0\1\135\1\136\1\53\1\0\5\136\1\0"+
    "\1\136\4\0\2\136\3\0\1\136\1\0\1\53\1\136"+
    "\6\0\1\136\1\0\1\136\16\0\5\136\10\0\2\211"+
    "\1\53\1\0\5\211\1\0\1\211\4\0\2\211\3\0"+
    "\1\211\1\0\1\53\1\211\6\0\1\211\1\0\1\211"+
    "\16\0\5\211\10\0\1\212\1\52\1\53\2\0\3\212"+
    "\1\60\1\61\1\62\13\0\1\53\1\62\6\0\1\60"+
    "\1\0\1\60\16\0\3\212\1\52\1\212\10\0\1\213"+
    "\1\52\1\53\2\0\3\213\1\60\1\61\1\62\13\0"+
    "\1\53\1\62\6\0\1\60\1\0\1\60\16\0\3\213"+
    "\1\52\1\213\10\0\2\141\3\0\3\141\1\60\25\0"+
    "\1\60\1\0\1\60\16\0\5\141\10\0\2\141\3\0"+
    "\3\141\47\0\5\141\70\0\1\214\11\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\215\24\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\1\216\27\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\7\10\1\217\20\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\10\10"+
    "\1\113\17\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\220\24\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\15\10\1\221\12\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\5\10\1\222\22\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\223\23\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\10\10\1\120\17\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\162\24\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\11\10\1\224\16\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\225\21\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\2\10\1\113\25\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\16\10\1\226\11\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\5\10\1\227\22\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\223\1\230\24\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\160\25\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\24\10\1\113\3\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\10\10\1\231"+
    "\17\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\15\10\1\232\12\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\7\10\1\113\20\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\233\24\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\10\10\1\234"+
    "\17\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\6\10\1\153\1\235\20\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\207\26\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\236\27\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\1\223\27\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\1\237"+
    "\27\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\12\10\1\240\15\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\241\24\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\25\10\1\242\2\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\7\10\1\220"+
    "\20\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\6\10\1\113\21\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\1\243\27\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\17\10\1\113\10\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\7\10\1\147\20\10"+
    "\10\0\5\10\10\0\2\244\1\53\1\0\5\244\1\0"+
    "\1\244\4\0\2\244\3\0\1\244\1\0\1\53\1\244"+
    "\6\0\1\244\1\0\1\244\16\0\5\244\10\0\1\245"+
    "\1\52\1\53\2\0\3\245\1\60\1\61\1\62\13\0"+
    "\1\53\1\62\6\0\1\60\1\0\1\60\16\0\3\245"+
    "\1\52\1\245\10\0\1\246\1\52\1\53\2\0\3\246"+
    "\1\60\1\61\1\62\13\0\1\53\1\62\6\0\1\60"+
    "\1\0\1\60\16\0\3\246\1\52\1\246\71\0\1\247"+
    "\10\0\13\10\1\0\1\10\4\0\4\10\1\250\23\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\12\10"+
    "\1\113\15\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\10\10\1\251\17\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\15\10\1\252\12\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\5\10\1\253\22\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\14\10"+
    "\1\254\13\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\113\24\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\255\25\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\26\10\1\256\1\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\257\23\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\14\10\1\113\13\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\15\10\1\260\12\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\11\10\1\261\16\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\25\10"+
    "\1\147\2\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\1\262\27\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\263\23\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\10\10\1\264\17\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\16\10\1\265"+
    "\11\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\7\10\1\266\20\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\1\267\27\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\10\10\1\270\17\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\1\67\27\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\3\10\1\130"+
    "\24\10\10\0\5\10\10\0\2\271\1\53\1\0\5\271"+
    "\1\0\1\271\4\0\2\271\3\0\1\271\1\0\1\53"+
    "\1\271\6\0\1\271\1\0\1\271\16\0\5\271\10\0"+
    "\1\272\1\52\1\53\2\0\3\272\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\272\1\52\1\272\10\0\1\273\1\52\1\53\2\0"+
    "\3\273\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\273\1\52\1\273\70\0"+
    "\1\274\11\0\13\10\1\0\1\10\4\0\1\275\27\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\1\257"+
    "\27\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\5\10\1\113\22\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\276\24\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\277\23\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\15\10\1\300"+
    "\12\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\11\10\1\113\16\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\11\10\1\301\16\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\17\10\1\160\10\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\11\10\1\302"+
    "\16\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\21\10\1\303\6\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\22\10\1\304\5\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\7\10\1\223\20\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\7\10\1\305"+
    "\20\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\24\10\1\147\3\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\5\10\1\306\22\10\10\0\5\10\10\0"+
    "\2\307\1\53\1\0\5\307\1\0\1\307\4\0\2\307"+
    "\3\0\1\307\1\0\1\53\1\307\6\0\1\307\1\0"+
    "\1\307\16\0\5\307\10\0\1\310\1\52\1\53\2\0"+
    "\3\310\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\310\1\52\1\310\10\0"+
    "\1\311\1\52\1\53\2\0\3\311\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\311\1\52\1\311\72\0\1\312\7\0\13\10\1\0"+
    "\1\10\4\0\5\10\1\223\22\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\21\10\1\313\6\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\6\10\1\314"+
    "\21\10\10\0\5\10\6\0\13\10\1\0\1\10\4\0"+
    "\10\10\1\315\17\10\10\0\5\10\6\0\13\10\1\0"+
    "\1\10\4\0\16\10\1\147\11\10\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\5\10\1\316\22\10\10\0"+
    "\5\10\6\0\13\10\1\0\1\10\4\0\1\317\27\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\10\10"+
    "\1\320\17\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\13\10\1\113\14\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\321\24\10\10\0\5\10"+
    "\10\0\2\322\1\53\1\0\5\322\1\0\1\322\4\0"+
    "\2\322\3\0\1\322\1\0\1\53\1\322\6\0\1\322"+
    "\1\0\1\322\16\0\5\322\10\0\1\323\1\52\1\53"+
    "\2\0\3\323\1\60\1\61\1\62\13\0\1\53\1\62"+
    "\6\0\1\60\1\0\1\60\16\0\3\323\1\52\1\323"+
    "\10\0\1\324\1\52\1\53\2\0\3\324\1\60\1\61"+
    "\1\62\13\0\1\53\1\62\6\0\1\60\1\0\1\60"+
    "\16\0\3\324\1\52\1\324\15\0\1\325\64\0\13\10"+
    "\1\0\1\10\4\0\23\10\1\113\4\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\11\10\1\326\16\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\11\10"+
    "\1\223\16\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\10\10\1\327\17\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\5\10\1\147\22\10\10\0\5\10"+
    "\6\0\13\10\1\0\1\10\4\0\11\10\1\330\16\10"+
    "\10\0\5\10\6\0\13\10\1\0\1\10\4\0\10\10"+
    "\1\206\17\10\10\0\5\10\10\0\2\331\1\53\1\0"+
    "\5\331\1\0\1\331\4\0\2\331\3\0\1\331\1\0"+
    "\1\53\1\331\6\0\1\331\1\0\1\331\16\0\5\331"+
    "\10\0\1\332\1\52\1\53\2\0\3\332\1\60\1\61"+
    "\1\62\13\0\1\53\1\62\6\0\1\60\1\0\1\60"+
    "\16\0\3\332\1\52\1\332\10\0\1\333\1\52\1\53"+
    "\2\0\3\333\1\60\1\61\1\62\13\0\1\53\1\62"+
    "\6\0\1\60\1\0\1\60\16\0\3\333\1\52\1\333"+
    "\73\0\1\334\6\0\13\10\1\0\1\10\4\0\15\10"+
    "\1\335\12\10\10\0\5\10\6\0\13\10\1\0\1\10"+
    "\4\0\6\10\1\336\21\10\10\0\5\10\6\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\160\24\10\10\0\5\10"+
    "\10\0\2\337\1\53\1\0\5\337\1\0\1\337\4\0"+
    "\2\337\3\0\1\337\1\0\1\53\1\337\6\0\1\337"+
    "\1\0\1\337\16\0\5\337\10\0\1\340\1\52\1\53"+
    "\2\0\3\340\1\60\1\61\1\62\13\0\1\53\1\62"+
    "\6\0\1\60\1\0\1\60\16\0\3\340\1\52\1\340"+
    "\10\0\1\341\1\52\1\53\2\0\3\341\1\60\1\61"+
    "\1\62\13\0\1\53\1\62\6\0\1\60\1\0\1\60"+
    "\16\0\3\341\1\52\1\341\70\0\1\342\11\0\13\10"+
    "\1\0\1\10\4\0\27\10\1\321\10\0\5\10\6\0"+
    "\13\10\1\0\1\10\4\0\21\10\1\113\6\10\10\0"+
    "\5\10\10\0\2\343\1\53\1\0\5\343\1\0\1\343"+
    "\4\0\2\343\3\0\1\343\1\0\1\53\1\343\6\0"+
    "\1\343\1\0\1\343\16\0\5\343\10\0\1\344\1\52"+
    "\1\53\2\0\3\344\1\60\1\61\1\62\13\0\1\53"+
    "\1\62\6\0\1\60\1\0\1\60\16\0\3\344\1\52"+
    "\1\344\10\0\1\345\1\52\1\53\2\0\3\345\1\60"+
    "\1\61\1\62\13\0\1\53\1\62\6\0\1\60\1\0"+
    "\1\60\16\0\3\345\1\52\1\345\72\0\1\53\11\0"+
    "\2\346\1\53\1\0\5\346\1\0\1\346\4\0\2\346"+
    "\3\0\1\346\1\0\1\53\1\346\6\0\1\346\1\0"+
    "\1\346\16\0\5\346\10\0\1\347\1\52\1\53\2\0"+
    "\3\347\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\347\1\52\1\347\10\0"+
    "\1\350\1\52\1\53\2\0\3\350\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\350\1\52\1\350\10\0\2\351\1\53\1\0\5\351"+
    "\1\0\1\351\4\0\2\351\3\0\1\351\1\0\1\53"+
    "\1\351\6\0\1\351\1\0\1\351\16\0\5\351\10\0"+
    "\1\352\1\52\1\53\2\0\3\352\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\352\1\52\1\352\10\0\1\353\1\52\1\53\2\0"+
    "\3\353\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\353\1\52\1\353\10\0"+
    "\2\354\1\53\1\0\5\354\1\0\1\354\4\0\2\354"+
    "\3\0\1\354\1\0\1\53\1\354\6\0\1\354\1\0"+
    "\1\354\16\0\5\354\10\0\1\355\1\52\1\53\2\0"+
    "\3\355\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\355\1\52\1\355\10\0"+
    "\1\356\1\52\1\53\2\0\3\356\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\356\1\52\1\356\10\0\2\357\1\53\1\0\5\357"+
    "\1\0\1\357\4\0\2\357\3\0\1\357\1\0\1\53"+
    "\1\357\6\0\1\357\1\0\1\357\16\0\5\357\10\0"+
    "\1\360\1\52\1\53\2\0\3\360\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\360\1\52\1\360\10\0\1\361\1\52\1\53\2\0"+
    "\3\361\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\361\1\52\1\361\10\0"+
    "\2\362\1\53\1\0\5\362\1\0\1\362\4\0\2\362"+
    "\3\0\1\362\1\0\1\53\1\362\6\0\1\362\1\0"+
    "\1\362\16\0\5\362\10\0\1\363\1\52\1\53\2\0"+
    "\3\363\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\363\1\52\1\363\10\0"+
    "\1\364\1\52\1\53\2\0\3\364\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\364\1\52\1\364\10\0\2\365\1\53\1\0\5\365"+
    "\1\0\1\365\4\0\2\365\3\0\1\365\1\0\1\53"+
    "\1\365\6\0\1\365\1\0\1\365\16\0\5\365\10\0"+
    "\1\366\1\52\1\53\2\0\3\366\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\366\1\52\1\366\10\0\1\367\1\52\1\53\2\0"+
    "\3\367\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\367\1\52\1\367\10\0"+
    "\2\370\1\53\1\0\5\370\1\0\1\370\4\0\2\370"+
    "\3\0\1\370\1\0\1\53\1\370\6\0\1\370\1\0"+
    "\1\370\16\0\5\370\10\0\1\371\1\52\1\53\2\0"+
    "\3\371\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\371\1\52\1\371\12\0"+
    "\1\53\23\0\1\53\45\0\1\372\1\52\1\53\2\0"+
    "\3\372\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\372\1\52\1\372\10\0"+
    "\1\373\1\52\1\53\2\0\3\373\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\373\1\52\1\373\10\0\1\374\1\52\1\53\2\0"+
    "\3\374\1\60\1\61\1\62\13\0\1\53\1\62\6\0"+
    "\1\60\1\0\1\60\16\0\3\374\1\52\1\374\10\0"+
    "\1\375\1\52\1\53\2\0\3\375\1\60\1\61\1\62"+
    "\13\0\1\53\1\62\6\0\1\60\1\0\1\60\16\0"+
    "\3\375\1\52\1\375\10\0\2\52\1\53\2\0\3\52"+
    "\1\60\1\61\1\62\13\0\1\53\1\62\6\0\1\60"+
    "\1\0\1\60\16\0\5\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\7\1\1\11\20\1\1\11\5\1"+
    "\1\11\2\0\1\1\1\0\2\1\1\11\1\0\3\1"+
    "\1\11\1\1\2\0\46\1\1\11\2\0\5\1\2\0"+
    "\44\1\1\11\3\1\1\0\32\1\1\0\24\1\1\0"+
    "\15\1\1\0\12\1\1\0\6\1\1\0\5\1\2\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  DLanguageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DLanguageLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return DLanguageTypes.INTEGER_LITERAL;
          }
        case 10: break;
        case 8: 
          { DLanguageTypes.CHARACTER;
          }
        case 11: break;
        case 3: 
          { return DLanguageTypes.IDENTIFIER;
          }
        case 12: break;
        case 1: 
          { /* ignore */
          }
        case 13: break;
        case 9: 
          { yybegin(YYINITIAL); return DLanguageTypes.CHARACTER;
          }
        case 14: break;
        case 5: 
          { yybegin(CHARLITERAL);
          }
        case 15: break;
        case 6: 
          { yybegin(YYINITIAL); return DLanguageTypes.STRING;
          }
        case 16: break;
        case 7: 
          { return DLanguageTypes.FLOAT_LITERAL;
          }
        case 17: break;
        case 2: 
          { return DLanguageTypes.MODIFIER;
          }
        case 18: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
